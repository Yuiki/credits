{"version":3,"sources":["RegistrationStatus.ts","CourseList.tsx","Requirements.ts","RequirementView.tsx","CourseMovementConfirmationModal.tsx","RequirementSelector.tsx","getValueFromModal.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["RegistrationStatus","CourseListItem","course","status","onClick","currentRequirement","newRequirement","disabled","ListGroup","Item","action","variant","Unregistered","undefined","Acquired","className","title","code","Badge","Registered","creditsCount","CourseList","requirement","courses","courseToStatus","courseToRequirement","onCourseClick","map","key","get","has","entries","filter","includes","Requirement","description","selectionToRequirement","requirementToOthersCount","requiredCreditsCount","this","getRequiredCreditsCount","registeredCreditsCounts","getRegisteredCreditsCount","includesExcess","acquired","min","registered","RequirementWithChildren","children","creditsCounts","reduce","previous","child","childRegisteredCreditsCount","Math","max","childRequiredCreditsCount","getStatus","RequirementWithCourses","allowsOthers","othersCount","courseStatus","SelectionRequirement","choices","CreditsCountLabelDelimiter","ExceededCreditsCountLabel","CreditsCountLabels","exceededCreditsCount","RequirementSummaryView","RequirementWithChildrenView","showsOnlyRegistered","onOthersCountsChange","onSelectionChange","OthersCountInput","currentOthersCount","onReturn","onHide","useState","setAcquired","registeredExcludingAcquired","setRegisteredExcludingAcquired","registeredIncludingAcquired","setRegisteredIncludingAcquired","computed","Card","body","border","Form","onSubmit","e","preventDefault","Row","Group","as","Col","md","controlId","Label","Control","type","placeholder","value","onChange","target","isInvalid","Feedback","ButtonToolbar","Button","RequirementWithCoursesView","isOpen","setIsOpen","showsInput","setShowsInput","Accordion","activeKey","length","block","Collapse","eventKey","SelectionRequirementView","Dropdown","Toggle","id","Menu","style","zIndex","choice","active","RequirementView","CourseMovementConfirmationModal","onExited","show","setShow","Modal","Body","Footer","courses0","isCompatible","$array","$object","$string","$number","Error","codeToCourse","Map","set","numberOrRangeToRange","numberOrRange","obj","convertJSONToRichRequirement","json","$optional","$union","$boolean","courseCode","requirements","coins17","coins17_0","mast17","mast17_0","klis17","klis17_0","console","log","defaultRequirement","RequirementSelector","newRequirementName","getValueFromModal","ModalType","props","modals","setModals","a","Promise","resolve","reject","modal","newModals","App","setRequirement","setCourseToStatus","setCourseToRequirement","setRequirementToOthersCount","setSelectionToRequirement","setShowsOnlyRegistered","Array","handleCourseClick","currentStatus","Navbar","bg","Brand","Container","Alert","Check","custom","label","checked","newOthersCount","selection","chosen","newCourseToRequirement","clearCourseToRequirement","delete","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4645eb67.chunk.js","sourcesContent":["enum RegistrationStatus {\n    Unregistered = 0,\n    Registered = 1,\n    Acquired = 2,\n}\n\nexport default RegistrationStatus;","import React from 'react';\nimport { Badge, ListGroup } from \"react-bootstrap\";\nimport Course from \"./Course\";\nimport RegistrationStatus from \"./RegistrationStatus\";\nimport Requirements, { RequirementWithCourses } from \"./Requirements\";\n\nconst CourseListItem = ({ course, status, onClick, currentRequirement, newRequirement, disabled }: {\n    course: Course,\n    status: RegistrationStatus,\n    onClick: () => void,\n    currentRequirement: Requirements | undefined,\n    newRequirement: Requirements,\n    disabled: boolean,\n}) => (\n        <ListGroup.Item action disabled={disabled} onClick={onClick}\n            variant={\n                status === RegistrationStatus.Unregistered ? undefined :\n                    currentRequirement === newRequirement ?\n                        status === RegistrationStatus.Acquired ? 'success' : 'primary' :\n                        'dark'\n            }>\n            <div className=\"d-flex justify-content-between align-items-center\">\n                <div>\n                    <div>{course.title}</div>\n                    <code>{course.code}</code>\n                </div>\n                <div className=\"ml-2 text-right flex-shrink-0\">\n                    {\n                        status === RegistrationStatus.Unregistered || currentRequirement === newRequirement ?\n                            (<></>) :\n                            currentRequirement === undefined ?\n                                (<Badge variant=\"secondary\">?</Badge>) :\n                                (<Badge variant=\"warning\">!</Badge>)\n                    }\n                    <Badge variant={status === RegistrationStatus.Acquired ? 'success' : status === RegistrationStatus.Registered ? 'primary' : 'secondary'}>\n                        {status === RegistrationStatus.Acquired ? '修得済み' : status === RegistrationStatus.Registered ? '履修する' : '履修しない'}\n                    </Badge>\n                    <div><span className=\"text-muted\">単位数</span> <strong>{course.creditsCount}</strong></div>\n                </div>\n            </div>\n        </ListGroup.Item>\n    );\n\nconst CourseList = ({ requirement, courses, courseToStatus, courseToRequirement, onCourseClick }: {\n    requirement: RequirementWithCourses,\n    courses: readonly Course[],\n    courseToStatus: Map<Course, RegistrationStatus>,\n    courseToRequirement: Map<Course, Requirements>,\n    onCourseClick: (course: Course) => void,\n}) => (\n        <ListGroup>\n            {\n                courses.map((course: Course) => (\n                    <CourseListItem key={course.code} course={course}\n                        currentRequirement={courseToRequirement.get(course)}\n                        newRequirement={requirement}\n                        status={courseToStatus.get(course) || RegistrationStatus.Unregistered}\n                        onClick={() => onCourseClick(course)}\n                        disabled={\n                            (!courseToStatus.has(course) || courseToStatus.get(course) === RegistrationStatus.Unregistered) &&\n                            [...courseToStatus.entries()]\n                                .filter(([_, status]) => status !== RegistrationStatus.Unregistered)\n                                .map(([course, _]) => course.title)\n                                .includes(course.title)\n                        } />\n                ))\n            }\n        </ListGroup>\n    );\n\nexport default CourseList;","import { $number, $object, isCompatible } from \"@hiroto/json-type-checker\";\nimport Course from \"./Course\";\nimport RegistrationStatus from \"./RegistrationStatus\";\n\ntype Requirements = RequirementWithChildren | RequirementWithCourses | SelectionRequirement;\nexport default Requirements;\n\nabstract class Requirement {\n    constructor(readonly title: string, readonly description?: string) { }\n    abstract getRegisteredCreditsCount({ includesExcess, courseToStatus, courseToRequirement, selectionToRequirement, requirementToOthersCount }: {\n        includesExcess: boolean\n        courseToStatus: Map<Course, RegistrationStatus>,\n        courseToRequirement: Map<Course, Requirements>,\n        selectionToRequirement: Map<SelectionRequirement, Requirement>,\n        requirementToOthersCount: Map<RequirementWithCourses, RegisteredCreditsCounts>,\n    }): RegisteredCreditsCounts;\n    abstract getRequiredCreditsCount(selectionToRequirement: Map<SelectionRequirement, Requirement>): Range;\n    getStatus({ courseToStatus, courseToRequirement, selectionToRequirement, requirementToOthersCount }: {\n        courseToStatus: Map<Course, RegistrationStatus>,\n        courseToRequirement: Map<Course, Requirements>,\n        selectionToRequirement: Map<SelectionRequirement, Requirement>,\n        requirementToOthersCount: Map<RequirementWithCourses, RegisteredCreditsCounts>,\n    }): RegistrationStatus {\n        const requiredCreditsCount = this.getRequiredCreditsCount(selectionToRequirement);\n        const registeredCreditsCounts = this.getRegisteredCreditsCount({ includesExcess: false, courseToStatus, courseToRequirement, selectionToRequirement, requirementToOthersCount })\n        return registeredCreditsCounts.acquired >= requiredCreditsCount.min ?\n            RegistrationStatus.Acquired :\n            registeredCreditsCounts.registered >= requiredCreditsCount.min ?\n                RegistrationStatus.Registered :\n                RegistrationStatus.Unregistered;\n    };\n}\n\nexport interface Range {\n    min: number;\n    max: number;\n}\nexport const isRange = (obj: unknown): obj is Range => isCompatible(obj, $object({ min: $number, max: $number }));\n\nexport interface RegisteredCreditsCounts {\n    acquired: number;\n    registered: number;\n}\n\nexport interface RequirementWithChildrenInit {\n    readonly title: string;\n    readonly description?: string;\n    readonly children: Iterable<Requirements>;\n    readonly creditsCount?: Range;\n}\n\nexport class RequirementWithChildren extends Requirement implements RequirementWithChildrenInit {\n    readonly children: readonly Requirements[];\n    readonly creditsCount?: Range;\n    constructor({ title, description, children, creditsCount }: RequirementWithChildrenInit) {\n        super(title, description);\n        this.children = [...children];\n        this.creditsCount = creditsCount;\n    }\n    getRegisteredCreditsCount({ includesExcess, courseToStatus, courseToRequirement, selectionToRequirement, requirementToOthersCount }: {\n        includesExcess: boolean\n        courseToStatus: Map<Course, RegistrationStatus>,\n        courseToRequirement: Map<Course, Requirements>,\n        selectionToRequirement: Map<SelectionRequirement, Requirement>,\n        requirementToOthersCount: Map<RequirementWithCourses, RegisteredCreditsCounts>,\n    }): RegisteredCreditsCounts {\n        const creditsCounts = this.children.reduce(\n            (previous, child) => {\n                const childRegisteredCreditsCount = child.getRegisteredCreditsCount({ includesExcess, courseToStatus, courseToRequirement, selectionToRequirement, requirementToOthersCount });\n                return {\n                    acquired: previous.acquired + childRegisteredCreditsCount.acquired,\n                    registered: previous.registered + childRegisteredCreditsCount.registered,\n                }\n            },\n            { acquired: 0, registered: 0 }\n        );\n        return includesExcess || this.creditsCount === undefined ? creditsCounts : {\n            acquired: Math.min(this.creditsCount.max, creditsCounts.acquired),\n            registered: Math.min(this.creditsCount.max, creditsCounts.registered),\n        };\n    }\n    getRequiredCreditsCount(selectionToRequirement: Map<SelectionRequirement, Requirement>): Range {\n        return this.creditsCount === undefined ? this.children.reduce((previous, child) => {\n            const childRequiredCreditsCount = child.getRequiredCreditsCount(selectionToRequirement);\n            return {\n                min: previous.min + childRequiredCreditsCount.min,\n                max: previous.max + childRequiredCreditsCount.max,\n            }\n        }, { min: 0, max: 0 }) : this.creditsCount;\n    }\n    getStatus({ courseToStatus, courseToRequirement, selectionToRequirement, requirementToOthersCount }: {\n        courseToStatus: Map<Course, RegistrationStatus>,\n        courseToRequirement: Map<Course, Requirements>,\n        selectionToRequirement: Map<SelectionRequirement, Requirement>,\n        requirementToOthersCount: Map<RequirementWithCourses, RegisteredCreditsCounts>,\n    }): RegistrationStatus {\n        return Math.min(\n            super.getStatus({ courseToStatus, courseToRequirement, selectionToRequirement, requirementToOthersCount }),\n            ...this.children.map(child => child.getStatus({ courseToStatus, courseToRequirement, selectionToRequirement, requirementToOthersCount }))\n        );\n    };\n}\n\nexport interface RequirementWithCoursesInit {\n    readonly title: string;\n    readonly description?: string;\n    readonly courses: Iterable<Course>;\n    readonly creditsCount: Range;\n    readonly allowsOthers?: boolean;\n}\n\nexport class RequirementWithCourses extends Requirement {\n    readonly courses: readonly Course[];\n    readonly creditsCount: Range;\n    readonly allowsOthers: boolean;\n    constructor({ title, description, courses, creditsCount, allowsOthers = false }: RequirementWithCoursesInit) {\n        super(title, description);\n        this.courses = [...courses];\n        this.creditsCount = creditsCount;\n        this.allowsOthers = allowsOthers;\n    }\n    getRegisteredCreditsCount({ includesExcess, courseToStatus, courseToRequirement, requirementToOthersCount }: {\n        includesExcess: boolean\n        courseToStatus: Map<Course, RegistrationStatus>,\n        courseToRequirement: Map<Course, Requirements>,\n        requirementToOthersCount: Map<RequirementWithCourses, RegisteredCreditsCounts>,\n    }): RegisteredCreditsCounts {\n        const othersCount = requirementToOthersCount.get(this) || { acquired: 0, registered: 0 };\n        const creditsCounts = this.courses.reduce((previous, course): RegisteredCreditsCounts => {\n            const courseStatus = courseToStatus.get(course) || RegistrationStatus.Unregistered;\n            if (courseToRequirement.get(course) === this) {\n                return courseStatus === RegistrationStatus.Acquired ?\n                    {\n                        acquired: previous.acquired + course.creditsCount,\n                        registered: previous.registered + course.creditsCount,\n                    } :\n                    courseStatus === RegistrationStatus.Registered ?\n                        {\n                            acquired: previous.acquired,\n                            registered: previous.registered + course.creditsCount,\n                        } :\n                        previous;\n            } else {\n                return previous;\n            }\n        }, othersCount);\n        return includesExcess || this.creditsCount === undefined ? creditsCounts : {\n            acquired: Math.min(this.creditsCount.max, creditsCounts.acquired),\n            registered: Math.min(this.creditsCount.max, creditsCounts.registered),\n        };\n    }\n    getRequiredCreditsCount() {\n        return this.creditsCount;\n    }\n}\n\nexport interface SelectionRequirementInit {\n    readonly title: string;\n    readonly description?: string;\n    readonly choices: Iterable<Requirements>\n}\n\nexport class SelectionRequirement extends Requirement implements SelectionRequirementInit {\n    readonly choices: readonly Requirements[]\n    constructor({ title, description, choices }: SelectionRequirementInit) {\n        super(title, description);\n        this.choices = [...choices];\n    }\n    getRegisteredCreditsCount({ includesExcess, courseToStatus, courseToRequirement, selectionToRequirement, requirementToOthersCount }: {\n        includesExcess: boolean\n        courseToStatus: Map<Course, RegistrationStatus>,\n        courseToRequirement: Map<Course, Requirements>,\n        selectionToRequirement: Map<SelectionRequirement, Requirement>,\n        requirementToOthersCount: Map<RequirementWithCourses, RegisteredCreditsCounts>,\n    }): RegisteredCreditsCounts {\n        return (selectionToRequirement.get(this) || this.choices[0]).getRegisteredCreditsCount({ includesExcess, courseToStatus, courseToRequirement, selectionToRequirement, requirementToOthersCount });\n    }\n    getRequiredCreditsCount(selectionToRequirement: Map<SelectionRequirement, Requirement>): Range {\n        return (selectionToRequirement.get(this) || this.choices[0]).getRequiredCreditsCount(selectionToRequirement);\n    }\n}\n","import React, { useState } from 'react';\nimport { Accordion, Badge, Button, ButtonToolbar, Card, Col, Dropdown, Form, ListGroup } from \"react-bootstrap\";\nimport Course from \"./Course\";\nimport CourseList from \"./CourseList\";\nimport RegistrationStatus from \"./RegistrationStatus\";\nimport Requirements, { RegisteredCreditsCounts, RequirementWithChildren, RequirementWithCourses, SelectionRequirement } from \"./Requirements\";\n\nconst CreditsCountLabelDelimiter = () => (<span className=\"text-muted\"> / </span>)\n\nconst ExceededCreditsCountLabel = ({ creditsCount }: { creditsCount: number }) => (\n    <>\n        <span className=\"text-muted\">(</span>\n        +{creditsCount}\n        <span className=\"text-muted\">)</span>\n    </>\n);\n\nconst CreditsCountLabels = ({ requirement, courseToStatus, courseToRequirement, selectionToRequirement, requirementToOthersCount }: {\n    requirement: Requirements,\n    courseToStatus: Map<Course, RegistrationStatus>,\n    courseToRequirement: Map<Course, Requirements>,\n    selectionToRequirement: Map<SelectionRequirement, Requirements>,\n    requirementToOthersCount: Map<RequirementWithCourses, RegisteredCreditsCounts>,\n}) => {\n    const creditsCount = requirement.getRegisteredCreditsCount({ courseToRequirement, courseToStatus, selectionToRequirement, requirementToOthersCount, includesExcess: false });\n    const exceededCreditsCount = requirement.getRegisteredCreditsCount({ courseToRequirement, courseToStatus, selectionToRequirement, requirementToOthersCount, includesExcess: true });\n    const requiredCreditsCount = requirement.getRequiredCreditsCount(selectionToRequirement);\n\n    return (\n        <div>\n            <span>\n                <span className=\"text-muted\">習得</span>\n                <> </>\n                <strong className=\"text-success\">{creditsCount.acquired}</strong>\n                {exceededCreditsCount.acquired > creditsCount.acquired ? (<ExceededCreditsCountLabel creditsCount={exceededCreditsCount.acquired - creditsCount.acquired} />) : (<></>)}\n            </span>\n            <CreditsCountLabelDelimiter />\n            <span>\n                <span className=\"text-muted\">履修</span>\n                <> </>\n                <strong className=\"text-primary\">{creditsCount.registered}</strong>\n                {exceededCreditsCount.registered > creditsCount.registered ? (<ExceededCreditsCountLabel creditsCount={exceededCreditsCount.registered - creditsCount.registered} />) : (<></>)}\n            </span>\n            <CreditsCountLabelDelimiter />\n            <span>\n                <span className=\"text-muted\">必要</span>\n                <> </>\n                <strong>\n                    {\n                        requiredCreditsCount.min === requiredCreditsCount.max ?\n                            requiredCreditsCount.min :\n                            `${requiredCreditsCount.min}~${requiredCreditsCount.max}`\n                    }\n                </strong>\n            </span>\n        </div>\n    )\n};\n\nexport const RequirementSummaryView = ({ requirement, courseToStatus, courseToRequirement, selectionToRequirement, requirementToOthersCount }: {\n    requirement: Requirements,\n    courseToStatus: Map<Course, RegistrationStatus>,\n    courseToRequirement: Map<Course, Requirements>,\n    selectionToRequirement: Map<SelectionRequirement, Requirements>,\n    requirementToOthersCount: Map<RequirementWithCourses, RegisteredCreditsCounts>,\n}) => {\n    const status = requirement.getStatus({ courseToStatus, courseToRequirement, selectionToRequirement, requirementToOthersCount });\n    return (\n        <>\n            <h5 className=\"d-flex justify-content-between align-items-center\">\n                <div>{requirement.title}</div>\n                <Badge className=\"ml-2 flex-shrink-0\" variant={status === RegistrationStatus.Acquired ? 'success' : status === RegistrationStatus.Registered ? 'primary' : 'secondary'}>\n                    {status === RegistrationStatus.Acquired ? '修得OK' : status === RegistrationStatus.Registered ? '履修OK' : '不足'}\n                </Badge>\n            </h5>\n            <div>\n                {requirement.description === undefined ? (<></>) : (<div className=\"text-muted\">{requirement.description}</div>)}\n                <CreditsCountLabels\n                    requirement={requirement}\n                    courseToStatus={courseToStatus} courseToRequirement={courseToRequirement}\n                    selectionToRequirement={selectionToRequirement} requirementToOthersCount={requirementToOthersCount}\n                />\n            </div>\n        </>\n    );\n}\n\nconst RequirementWithChildrenView = ({ requirement, showsOnlyRegistered, courseToStatus, courseToRequirement, selectionToRequirement, requirementToOthersCount, onCourseClick, onOthersCountsChange, onSelectionChange }: {\n    requirement: RequirementWithChildren,\n    showsOnlyRegistered: boolean,\n    courseToStatus: Map<Course, RegistrationStatus>,\n    courseToRequirement: Map<Course, RequirementWithCourses>,\n    selectionToRequirement: Map<SelectionRequirement, Requirements>,\n    requirementToOthersCount: Map<RequirementWithCourses, RegisteredCreditsCounts>,\n    onCourseClick: (course: Course, requirement: RequirementWithCourses) => void,\n    onOthersCountsChange: (requirement: RequirementWithCourses, newOthersCount: RegisteredCreditsCounts) => void,\n    onSelectionChange: (selection: SelectionRequirement, chosen: Requirements) => void,\n}) => (\n        <>\n            <RequirementSummaryView\n                requirement={requirement}\n                courseToStatus={courseToStatus} courseToRequirement={courseToRequirement}\n                selectionToRequirement={selectionToRequirement} requirementToOthersCount={requirementToOthersCount}\n            />\n            <ListGroup className=\"mt-3\">\n                {\n                    requirement.children.map(child => (\n                        <ListGroup.Item key={child.title}>\n                            <RequirementView\n                                requirement={child} showsOnlyRegistered={showsOnlyRegistered}\n                                courseToStatus={courseToStatus} courseToRequirement={courseToRequirement} selectionToRequirement={selectionToRequirement}\n                                onCourseClick={onCourseClick} onSelectionChange={onSelectionChange}\n                                onOthersCountsChange={onOthersCountsChange} requirementToOthersCount={requirementToOthersCount}\n                            />\n                        </ListGroup.Item>\n                    ))\n                }\n            </ListGroup>\n        </>\n    );\n\nconst OthersCountInput = ({ currentOthersCount, onReturn, onHide }: {\n    currentOthersCount: RegisteredCreditsCounts,\n    onReturn: (newOthersCount: RegisteredCreditsCounts) => void,\n    onHide: () => void,\n}) => {\n    const [acquired, setAcquired] = useState(undefined as number | undefined);\n    const [registeredExcludingAcquired, setRegisteredExcludingAcquired] = useState(undefined as number | undefined);\n    const [registeredIncludingAcquired, setRegisteredIncludingAcquired] = useState(undefined as number | undefined);\n\n    const computed = {\n        acquired: acquired || currentOthersCount.acquired,\n        registered:\n            registeredIncludingAcquired !== undefined ?\n                registeredIncludingAcquired :\n                registeredExcludingAcquired !== undefined ?\n                    (acquired !== undefined ? acquired : currentOthersCount.acquired) + registeredExcludingAcquired :\n                    acquired !== undefined ?\n                        currentOthersCount.registered + acquired - currentOthersCount.acquired :\n                        currentOthersCount.registered,\n    }\n\n    return (\n        <Card body border=\"primary\">\n            <Form onSubmit={(e: React.FormEvent<HTMLFormElement>) => {\n                e.preventDefault();\n                onReturn(computed);\n                onHide();\n            }}>\n                <Form.Row>\n                    <Form.Group as={Col} md=\"4\" controlId=\"validationCustom01\">\n                        <Form.Label>習得済みの単位数 <span className=\"text-muted\">(a)</span></Form.Label>\n                        <Form.Control\n                            type=\"number\" min={0}\n                            placeholder={`${computed.acquired}`}\n                            value={acquired === undefined ? '' : `${acquired}`}\n                            onChange={\n                                (e: React.ChangeEvent<HTMLInputElement>) =>\n                                    setAcquired(e.target.value === '' ? undefined : +e.target.value)\n                            }\n                            isInvalid={computed.acquired < 0}\n                        />\n                        <Form.Control.Feedback type=\"invalid\">(a) &gt;= 0</Form.Control.Feedback>\n                    </Form.Group>\n                    <Form.Group as={Col} md=\"4\" controlId=\"validationCustom02\">\n                        <Form.Label>履修する単位数 <span className=\"text-muted\">(b)</span></Form.Label>\n                        <Form.Control\n                            type=\"number\" min={0}\n                            placeholder={`${computed.registered - computed.acquired}`}\n                            value={registeredExcludingAcquired === undefined ? '' : `${registeredExcludingAcquired}`}\n                            onChange={\n                                (e: React.ChangeEvent<HTMLInputElement>) => {\n                                    if (e.target.value === '') {\n                                        setRegisteredExcludingAcquired(undefined);\n                                    } else {\n                                        setRegisteredExcludingAcquired(+e.target.value);\n                                        setRegisteredIncludingAcquired(undefined);\n                                    }\n                                }\n                            }\n                            isInvalid={computed.acquired > computed.registered}\n                        />\n                        <Form.Control.Feedback type=\"invalid\">(b) &gt;= 0</Form.Control.Feedback>\n                    </Form.Group>\n                    <Form.Group as={Col} md=\"4\" controlId=\"validationCustom02\">\n                        <Form.Label>計 <span className=\"text-muted\">(a) + (b)</span></Form.Label>\n                        <Form.Control\n                            type=\"number\" min={0}\n                            placeholder={`${computed.registered}`}\n                            value={registeredIncludingAcquired === undefined ? '' : `${registeredIncludingAcquired}`}\n                            onChange={\n                                (e: React.ChangeEvent<HTMLInputElement>) => {\n                                    if (e.target.value === '') {\n                                        setRegisteredIncludingAcquired(undefined);\n                                    } else {\n                                        setRegisteredIncludingAcquired(+e.target.value);\n                                        setRegisteredExcludingAcquired(undefined);\n                                    }\n                                }\n                            }\n                        />\n                    </Form.Group>\n                </Form.Row>\n                <ButtonToolbar>\n                    <Button\n                        type=\"submit\"\n                        disabled={computed.acquired < 0 || computed.acquired > computed.registered}\n                    >OK</Button>\n                    <Button variant=\"secondary\" onClick={onHide}>キャンセル</Button>\n                </ButtonToolbar>\n            </Form>\n        </Card>\n    )\n}\n\nconst RequirementWithCoursesView = ({ requirement, showsOnlyRegistered, courseToStatus, courseToRequirement, onCourseClick, onOthersCountsChange, selectionToRequirement, requirementToOthersCount }: {\n    requirement: RequirementWithCourses,\n    showsOnlyRegistered: boolean,\n    courseToStatus: Map<Course, RegistrationStatus>,\n    courseToRequirement: Map<Course, Requirements>,\n    selectionToRequirement: Map<SelectionRequirement, Requirements>,\n    requirementToOthersCount: Map<RequirementWithCourses, RegisteredCreditsCounts>,\n    onCourseClick: (course: Course, requirement: RequirementWithCourses) => void,\n    onOthersCountsChange: (newOthersCount: RegisteredCreditsCounts) => void,\n    onSelectionChange: (selection: SelectionRequirement, chosen: Requirements) => void,\n}) => {\n    const [isOpen, setIsOpen] = useState(false);\n    const [showsInput, setShowsInput] = useState(false);\n\n    const courses = requirement.courses.filter(course =>\n        !showsOnlyRegistered || (courseToStatus.get(course) !== RegistrationStatus.Unregistered &&\n            requirement === courseToRequirement.get(course)));\n\n    return (\n        <>\n            <Accordion activeKey={isOpen ? '0' : ''}>\n                <div className={`bg-white ${isOpen ? 'sticky-top' : ''}`}>\n                    <RequirementSummaryView\n                        requirement={requirement}\n                        courseToStatus={courseToStatus} courseToRequirement={courseToRequirement}\n                        selectionToRequirement={selectionToRequirement} requirementToOthersCount={requirementToOthersCount}\n                    />\n                    {\n                        courses.length === 0 ?\n                            requirement.allowsOthers ? (\n                                showsInput ? (<></>) : (\n                                    <Button block className=\"mt-3\" variant=\"secondary\" onClick={() => setShowsInput(true)}>\n                                        単位数を入力\n                                    </Button>\n                                )\n                            ) : (\n                                    <Button block className=\"mt-3\" variant=\"outline-secondary\" disabled>\n                                        {showsOnlyRegistered ? '履修する' : ''}科目はありません\n                                    </Button>\n                                ) : (\n                                <Button\n                                    block className=\"mt-3\"\n                                    onClick={() => setIsOpen(!isOpen)}\n                                    variant={isOpen ? 'primary' : 'outline-secondary'}\n                                >\n                                    {showsOnlyRegistered ? '履修する' : ''}科目を{isOpen ? '非' : ''}表示\n                                </Button>\n                            )\n                    }\n                </div>\n                {\n                    showsInput ? (\n                        <div className=\"mt-3\">\n                            <OthersCountInput\n                                currentOthersCount={requirementToOthersCount.get(requirement) || { acquired: 0, registered: 0 }}\n                                onReturn={onOthersCountsChange} onHide={() => setShowsInput(false)}\n                            />\n                        </div>\n                    ) : (<></>)\n                }\n                <Accordion.Collapse eventKey=\"0\">\n                    {\n                        courses.length === 0 ? (<></>) : (\n                            <div className=\"mt-3\">\n                                <CourseList requirement={requirement} courses={courses}\n                                    courseToStatus={courseToStatus} courseToRequirement={courseToRequirement}\n                                    onCourseClick={course => onCourseClick(course, requirement)} />\n                            </div>\n                        )\n                    }\n                </Accordion.Collapse>\n            </Accordion>\n        </>\n    );\n}\n\nconst SelectionRequirementView = ({ requirement, showsOnlyRegistered, courseToStatus, courseToRequirement, selectionToRequirement, requirementToOthersCount, onCourseClick, onOthersCountsChange, onSelectionChange }: {\n    requirement: SelectionRequirement,\n    showsOnlyRegistered: boolean,\n    courseToStatus: Map<Course, RegistrationStatus>,\n    courseToRequirement: Map<Course, RequirementWithCourses>,\n    selectionToRequirement: Map<SelectionRequirement, Requirements>,\n    requirementToOthersCount: Map<RequirementWithCourses, RegisteredCreditsCounts>,\n    onCourseClick: (course: Course, requirement: RequirementWithCourses) => void,\n    onOthersCountsChange: (requirement: RequirementWithCourses, newOthersCount: RegisteredCreditsCounts) => void,\n    onSelectionChange: (selection: SelectionRequirement, chosen: Requirements) => void,\n}) => (\n        <>\n            <Dropdown>\n                <Dropdown.Toggle id=\"\" variant=\"secondary\">{requirement.title} を変更</Dropdown.Toggle>\n\n                <Dropdown.Menu style={{ zIndex: 1100 }}>\n                    {\n                        requirement.choices.map(choice => (\n                            <Dropdown.Item key={choice.title}\n                                active={choice === (selectionToRequirement.get(requirement) || requirement.choices[0])}\n                                onClick={() => onSelectionChange(requirement, choice)}>\n                                {choice.title}\n                            </Dropdown.Item>\n                        ))\n                    }\n                </Dropdown.Menu>\n            </Dropdown>\n            <div className=\"mt-3\">\n                <RequirementView\n                    requirement={selectionToRequirement.get(requirement) || requirement.choices[0]}\n                    showsOnlyRegistered={showsOnlyRegistered}\n                    courseToStatus={courseToStatus} courseToRequirement={courseToRequirement}\n                    selectionToRequirement={selectionToRequirement} requirementToOthersCount={requirementToOthersCount}\n                    onCourseClick={onCourseClick} onOthersCountsChange={onOthersCountsChange}\n                    onSelectionChange={onSelectionChange}\n                />\n            </div>\n        </>\n    );\n\nconst RequirementView = ({ requirement, showsOnlyRegistered, courseToStatus, courseToRequirement, onCourseClick, onOthersCountsChange, onSelectionChange, selectionToRequirement, requirementToOthersCount }: {\n    requirement: Requirements,\n    showsOnlyRegistered: boolean,\n    courseToStatus: Map<Course, RegistrationStatus>,\n    courseToRequirement: Map<Course, RequirementWithCourses>,\n    selectionToRequirement: Map<SelectionRequirement, Requirements>,\n    requirementToOthersCount: Map<RequirementWithCourses, RegisteredCreditsCounts>,\n    onCourseClick: (course: Course, requirement: RequirementWithCourses) => void,\n    onOthersCountsChange: (requirement: RequirementWithCourses, newOthersCount: RegisteredCreditsCounts) => void,\n    onSelectionChange: (selection: SelectionRequirement, chosen: Requirements) => void,\n}) =>\n    requirement instanceof RequirementWithChildren ? (\n        <RequirementWithChildrenView\n            requirement={requirement} showsOnlyRegistered={showsOnlyRegistered}\n            courseToStatus={courseToStatus} courseToRequirement={courseToRequirement}\n            selectionToRequirement={selectionToRequirement} requirementToOthersCount={requirementToOthersCount}\n            onCourseClick={onCourseClick} onOthersCountsChange={onOthersCountsChange} onSelectionChange={onSelectionChange}\n        />\n    ) :\n        requirement instanceof RequirementWithCourses ? (\n            <RequirementWithCoursesView\n                requirement={requirement} showsOnlyRegistered={showsOnlyRegistered}\n                courseToStatus={courseToStatus} courseToRequirement={courseToRequirement}\n                selectionToRequirement={selectionToRequirement} requirementToOthersCount={requirementToOthersCount}\n                onCourseClick={onCourseClick} onSelectionChange={onSelectionChange}\n                onOthersCountsChange={creditsCounts => onOthersCountsChange(requirement, creditsCounts)}\n            />) :\n            (\n                <SelectionRequirementView\n                    requirement={requirement} showsOnlyRegistered={showsOnlyRegistered}\n                    courseToStatus={courseToStatus} courseToRequirement={courseToRequirement}\n                    selectionToRequirement={selectionToRequirement} requirementToOthersCount={requirementToOthersCount}\n                    onCourseClick={onCourseClick} onOthersCountsChange={onOthersCountsChange} onSelectionChange={onSelectionChange}\n                />\n            );\n\n\nexport default RequirementView;\n","import React, { useState } from \"react\";\nimport { Button, Card, Modal } from \"react-bootstrap\";\nimport Course from \"./Course\";\nimport RegistrationStatus from \"./RegistrationStatus\";\nimport Requirements, { RegisteredCreditsCounts, RequirementWithCourses, SelectionRequirement } from \"./Requirements\";\nimport { RequirementSummaryView } from \"./RequirementView\";\n\nconst CourseMovementConfirmationModal = ({ currentRequirement, courseToStatus, courseToRequirement, selectionToRequirement, requirementToOthersCount, onReturn, onExited }: {\n    currentRequirement: RequirementWithCourses,\n    courseToStatus: Map<Course, RegistrationStatus>,\n    courseToRequirement: Map<Course, Requirements>,\n    selectionToRequirement: Map<SelectionRequirement, Requirements>,\n    requirementToOthersCount: Map<RequirementWithCourses, RegisteredCreditsCounts>,\n    onReturn: (value: boolean) => void,\n    onExited: () => void,\n}) => {\n    const [show, setShow] = useState(true);\n\n    return (\n        <Modal show={show} onHide={() => { setShow(false); onReturn(false); }} onExited={onExited}>\n            <Modal.Body>\n                <p>\n                    この科目はすでに以下の要件に割り当てられています。\n                    <strong>続けると、この要件への割り当ては解除されます。</strong>\n                </p>\n                <p>各科目に割り当てできる要件は1つまでです。</p>\n                <Card body>\n                    <RequirementSummaryView\n                        requirement={currentRequirement}\n                        courseToStatus={courseToStatus} courseToRequirement={courseToRequirement}\n                        selectionToRequirement={selectionToRequirement} requirementToOthersCount={requirementToOthersCount}\n                    />\n                </Card>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={() => { setShow(false); onReturn(false); }}>キャンセル</Button>\n                <Button variant=\"primary\" onClick={() => { setShow(false); onReturn(true); }}>続ける</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n};\n\nexport default CourseMovementConfirmationModal;","import { $array, $number, $object, $optional, $string, $union, isCompatible, $boolean } from \"@hiroto/json-type-checker\";\nimport React from \"react\";\nimport { Form } from \"react-bootstrap\";\nimport Course from \"./Course.js\";\nimport courses0 from './courses1.json';\nimport Requirements, { isRange, Range, RequirementWithChildren, RequirementWithCourses, SelectionRequirement } from \"./Requirements\";\nimport coins17_0 from './requirements/coins17.json';\nimport mast17_0 from './requirements/mast17.json';\nimport klis17_0 from './requirements/klis17.json';\n\nconst courses: unknown = courses0;\n\nif (!isCompatible(courses, $array($object({\n    title: $string,\n    code: $string,\n    creditsCount: $number,\n})))) {\n    throw new Error('科目定義が不正です');\n}\n\nconst codeToCourse = new Map<string, Course>();\nfor (const course of courses) {\n    codeToCourse.set(course.code, course);\n}\n\nconst numberOrRangeToRange = (numberOrRange: number | Range) =>\n    isRange(numberOrRange) ? numberOrRange : {\n        min: numberOrRange,\n        max: numberOrRange,\n    };\n\nconst convertJSONToRichRequirement = (json: unknown): Requirements => {\n    if (isCompatible(json, $object({\n        title: $string,\n        description: $optional($string),\n        creditsCount: $union($number, $object({\n            min: $number,\n            max: $number,\n        })),\n        courses: $array($string),\n        allowsOthers: $optional($boolean),\n    }))) {\n        return new RequirementWithCourses({\n            title: json.title,\n            description: json.description,\n            creditsCount: numberOrRangeToRange(json.creditsCount),\n            courses: json.courses.map(courseCode => {\n                const course = codeToCourse.get(courseCode);\n                if (course === undefined) { throw new Error(`要件定義が不正です。科目番号 ${courseCode} は定義されていません。`); }\n                return course;\n            }),\n            allowsOthers: json.allowsOthers,\n        });\n    } else if (isCompatible(json, $object({\n        title: $string,\n        description: $optional($string),\n        children: $array($object({})),\n        creditsCount: $optional($union($number, $object({\n            min: $number,\n            max: $number,\n        }))),\n    }))) {\n        return new RequirementWithChildren({\n            title: json.title,\n            description: json.description,\n            children: json.children.map(child => convertJSONToRichRequirement(child)),\n            creditsCount: json.creditsCount === undefined ? undefined : numberOrRangeToRange(json.creditsCount),\n        });\n    } else if (isCompatible(json, $object({\n        title: $string,\n        description: $optional($string),\n        choices: $array($object({})),\n    }))) {\n        return new SelectionRequirement({\n            title: json.title,\n            description: json.description,\n            choices: json.choices.map(choice => convertJSONToRichRequirement(choice)),\n        })\n    } else {\n        throw new Error('要件定義が不正です。')\n    }\n}\n\nconst requirements = {\n    coins17: convertJSONToRichRequirement(coins17_0),\n    mast17: convertJSONToRichRequirement(mast17_0),\n    klis17: convertJSONToRichRequirement(klis17_0),\n};\n\nconsole.log(requirements);\n\nexport const defaultRequirement = requirements.coins17;\n\nconst RequirementSelector = ({ onChange }: { onChange: (requirement: Requirements) => void }) => {\n    return (\n        <Form.Group>\n            <Form.Label>学類を選択</Form.Label>\n            <Form.Control as=\"select\" onChange={e => {\n                const newRequirementName = (e.target as HTMLSelectElement).value as keyof typeof requirements;\n                onChange(requirements[newRequirementName]);\n            }}>\n                <option value=\"coins17\">情報科学類（2017年度入学）</option>\n                <option value=\"mast17\">情報メディア創成学類（2017年度入学）</option>\n                <option value=\"klis17\">知識情報・図書館学類（2017年度入学）</option>\n            </Form.Control>\n        </Form.Group>\n    )\n};\n\nexport default RequirementSelector;","import React from 'react';\n\nconst getValueFromModal = async <T, P>(\n    ModalType: (props: {\n        onReturn: (value: T) => void,\n        onExited: () => void,\n    } & P) => JSX.Element,\n    props: P,\n    modals: JSX.Element[],\n    setModals: React.Dispatch<React.SetStateAction<JSX.Element[]>>,\n): Promise<T> => new Promise((resolve, reject) => {\n    try {\n        const modal = (\n            <ModalType\n                {...props}\n                onReturn={value => resolve(value)}\n                onExited={() => setModals(newModals.filter(value => value !== modal))}\n            />\n        );\n        const newModals = [...modals, modal];\n        setModals(newModals);\n    } catch (e) {\n        reject(e);\n    }\n});\n\nexport default getValueFromModal;","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React, { useState } from 'react';\nimport { Alert, Container, Form, Navbar } from 'react-bootstrap';\nimport './App.css';\nimport CourseMovementConfirmationModal from './CourseMovementConfirmationModal';\nimport Course from './Course';\nimport RegistrationStatus from './RegistrationStatus';\nimport Requirements, { RegisteredCreditsCounts, RequirementWithChildren, RequirementWithCourses, SelectionRequirement } from './Requirements';\nimport RequirementSelector, { defaultRequirement } from './RequirementSelector';\nimport RequirementView from './RequirementView';\nimport getValueFromModal from './getValueFromModal';\n\nconst App = () => {\n    const [requirement, setRequirement] = useState(defaultRequirement);\n    const [courseToStatus, setCourseToStatus] = useState(new Map<Course, RegistrationStatus>());\n    const [courseToRequirement, setCourseToRequirement] = useState(new Map<Course, RequirementWithCourses>());\n    const [requirementToOthersCount, setRequirementToOthersCount] = useState(\n        new Map<RequirementWithCourses, { acquired: number, registered: number }>()\n    );\n    const [selectionToRequirement, setSelectionToRequirement] = useState(new Map<SelectionRequirement, Requirements>());\n    const [showsOnlyRegistered, setShowsOnlyRegistered] = useState(false);\n    const [modals, setModals] = useState(new Array<JSX.Element>());\n\n    const handleCourseClick = async (course: Course, requirement: RequirementWithCourses) => {\n        const currentStatus: RegistrationStatus = courseToStatus.get(course) || RegistrationStatus.Unregistered;\n        const currentRequirement = courseToRequirement.get(course);\n        if (currentStatus === RegistrationStatus.Unregistered || currentRequirement === requirement) {\n            setCourseToStatus(new Map(\n                [...courseToStatus, [\n                    course,\n                    showsOnlyRegistered ?\n                        currentStatus === RegistrationStatus.Acquired ? RegistrationStatus.Registered : RegistrationStatus.Acquired :\n                        (currentStatus + 1) % 3\n                ]]\n            ));\n        } else if (\n            currentRequirement !== undefined &&\n            !await getValueFromModal(\n                CourseMovementConfirmationModal,\n                { currentRequirement, courseToStatus, courseToRequirement, selectionToRequirement, requirementToOthersCount },\n                modals, setModals\n            )\n        ) {\n            return;\n        }\n        setCourseToRequirement(new Map([...courseToRequirement, [course, requirement]]));\n    }\n\n    const clearCourseToRequirement = (requirement: Requirements, newCourseToRequirement: Map<Course, RequirementWithCourses>) => {\n        if (requirement instanceof RequirementWithChildren) {\n            for (const child of requirement.children) {\n                clearCourseToRequirement(child, newCourseToRequirement);\n            }\n        } else if (requirement instanceof RequirementWithCourses) {\n            for (const course of requirement.courses) {\n                if (newCourseToRequirement.get(course) === requirement) {\n                    newCourseToRequirement.delete(course);\n                }\n            }\n        } else {\n            clearCourseToRequirement(selectionToRequirement.get(requirement) || requirement.choices[0], newCourseToRequirement);\n        }\n    }\n\n    const handleOthersCountsChange = (requirement: RequirementWithCourses, newOthersCount: RegisteredCreditsCounts) => {\n        setRequirementToOthersCount(new Map([\n            ...requirementToOthersCount,\n            [requirement, newOthersCount]\n        ]));\n    }\n\n    const handleSelectionChange = (selection: SelectionRequirement, chosen: Requirements) => {\n        const newCourseToRequirement = new Map(courseToRequirement);\n        clearCourseToRequirement(selection, newCourseToRequirement);\n        setCourseToRequirement(newCourseToRequirement);\n        setSelectionToRequirement(new Map([...selectionToRequirement, [selection, chosen]]));\n    }\n\n    return (\n        <>\n            {modals}\n            <Navbar variant=\"dark\" bg=\"dark\">\n                <Navbar.Brand>卒業要件を満たしたい</Navbar.Brand>\n            </Navbar>\n            <Container>\n                <Alert variant=\"danger\" className=\"mt-3\">\n                    このツールの結果を利用する場合、必ず履修要覧や支援室などでその結果が正しいことを確認するようにしてください。\n                    <strong>科目や要件の定義が誤っていたり、実際には認められない履修の組み合わせがある可能性があります。</strong>\n                </Alert>\n                <RequirementSelector onChange={requirement => setRequirement(requirement)} />\n                <Form.Check custom className=\"mb-3\" id=\"showsOnlyRegisteredCheck\"\n                    label=\"履修する科目のみ表示する\"\n                    checked={showsOnlyRegistered}\n                    onChange={() => setShowsOnlyRegistered(!showsOnlyRegistered)}\n                />\n                <div className=\"my-3\">\n                    <RequirementView\n                        requirement={requirement} showsOnlyRegistered={showsOnlyRegistered}\n                        courseToStatus={courseToStatus} courseToRequirement={courseToRequirement} selectionToRequirement={selectionToRequirement}\n                        onCourseClick={handleCourseClick} onOthersCountsChange={handleOthersCountsChange}\n                        onSelectionChange={handleSelectionChange} requirementToOthersCount={requirementToOthersCount}\n                    />\n                </div>\n            </Container>\n        </>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}