{"version":3,"sources":["RegistrationStatus.ts","Requirements.ts","RequirementSelector.tsx","CourseList.tsx","RequirementView.tsx","CourseMovementConfirmationModal.tsx","getValueFromModal.tsx","RequirementsRootView.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["RegistrationStatus","Requirement","name","courseToStatus","courseToRequirement","selectionNameToOptionName","requirementToOthersCount","requiredCreditsCount","this","getRequiredCreditsCount","registeredCreditsCounts","getRegisteredCreditsCount","includesExcess","acquired","min","Acquired","registered","Registered","Unregistered","RequirementWithChildren","description","children","creditsCount","creditsCounts","reduce","previous","child","childRegisteredCreditsCount","undefined","Math","max","childRequiredCreditsCount","map","getStatus","RequirementWithCourses","courses","allowsOthers","othersCount","get","course","courseStatus","SelectionRequirement","selectionName","options0","options","optionNameToRequirement","Map","requirement","selectedOptionName","getSelectedOptionName","selectedRequirement","getSelectedRequirement","courses0","isCompatible","$array","$object","title","$string","code","$number","Error","codeToCourse","set","numberOrRangeToRange","numberOrRange","obj","convertJSONToRichRequirement","json","selectionNameToCount","$optional","$union","$boolean","courseCode","selectionCount","option","requirements","coins17","coins17_0","mast17","mast17_0","klis17","klis17_0","console","log","defaultRequirement","RequirementSelector","onChange","Form","Group","Label","Control","as","e","newRequirementName","target","value","CourseListItem","status","onClick","currentRequirement","newRequirement","disabled","ListGroup","Item","action","variant","className","Badge","CourseList","onCourseClick","key","has","entries","filter","includes","CreditsCountLabelDelimiter","ExceededCreditsCountLabel","CreditsCountLabels","exceededCreditsCount","RequirementSummaryView","RequirementWithChildrenView","showsOnlyRegistered","onOthersCountsChange","onSelectionChange","OthersCountInput","currentOthersCount","onReturn","onHide","useState","setAcquired","registeredExcludingAcquired","setRegisteredExcludingAcquired","registeredIncludingAcquired","setRegisteredIncludingAcquired","computed","Card","body","border","onSubmit","preventDefault","Row","Col","md","controlId","type","placeholder","isInvalid","Feedback","ButtonToolbar","Button","RequirementWithCoursesView","isOpen","setIsOpen","showsInput","setShowsInput","Accordion","activeKey","length","block","Collapse","eventKey","SelectionRequirementView","Dropdown","Toggle","id","style","overflow","textOverflow","Menu","zIndex","active","newOptionName","RequirementView","CourseMovementConfirmationModal","onExited","show","setShow","Modal","Body","Footer","getValueFromModal","ModalType","props","modals","setModals","a","Promise","resolve","reject","modal","newModals","emptyPlan","RequirementsRootView","plan","setShowsOnlyRegistered","Array","handleCourseClick","currentStatus","newCourseToStatus","clearCourseToRequirementInSelection","newCourseToRequirement","clearCourseToRequirement","delete","Check","custom","label","checked","newOthersCount","App","setRequirement","setPlan","Navbar","bg","Brand","Container","Alert","newPlan","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bae13b84.chunk.js","sourcesContent":["enum RegistrationStatus {\n    Unregistered = 0,\n    Registered = 1,\n    Acquired = 2,\n}\n\nexport default RegistrationStatus;","import { $number, $object, isCompatible } from \"@hiroto/json-type-checker\";\nimport Course from \"./Course\";\nimport RegistrationStatus from \"./RegistrationStatus\";\n\ntype Requirements = RequirementWithChildren | RequirementWithCourses | SelectionRequirement;\nexport default Requirements;\n\nabstract class Requirement {\n    abstract getRegisteredCreditsCount({ includesExcess, courseToStatus, courseToRequirement, selectionNameToOptionName, requirementToOthersCount }: {\n        includesExcess: boolean\n        courseToStatus: Map<Course, RegistrationStatus>,\n        courseToRequirement: Map<Course, Requirements>,\n        selectionNameToOptionName: ReadonlyMap<string, string>;\n        requirementToOthersCount: Map<RequirementWithCourses, RegisteredCreditsCounts>,\n    }): RegisteredCreditsCounts;\n    abstract getRequiredCreditsCount(selectionNameToOptionName: ReadonlyMap<string, string>): Range;\n    constructor(readonly name: string) { }\n    getStatus({ courseToStatus, courseToRequirement, selectionNameToOptionName, requirementToOthersCount }: {\n        courseToStatus: Map<Course, RegistrationStatus>,\n        courseToRequirement: Map<Course, Requirements>,\n        selectionNameToOptionName: ReadonlyMap<string, string>\n        requirementToOthersCount: Map<RequirementWithCourses, RegisteredCreditsCounts>,\n    }): RegistrationStatus {\n        const requiredCreditsCount = this.getRequiredCreditsCount(selectionNameToOptionName);\n        const registeredCreditsCounts = this.getRegisteredCreditsCount({ includesExcess: false, courseToStatus, courseToRequirement, selectionNameToOptionName, requirementToOthersCount })\n        return registeredCreditsCounts.acquired >= requiredCreditsCount.min ?\n            RegistrationStatus.Acquired :\n            registeredCreditsCounts.registered >= requiredCreditsCount.min ?\n                RegistrationStatus.Registered :\n                RegistrationStatus.Unregistered;\n    };\n}\n\nexport interface Range {\n    min: number;\n    max: number;\n}\nexport const isRange = (obj: unknown): obj is Range => isCompatible(obj, $object({ min: $number, max: $number }));\n\nexport interface RegisteredCreditsCounts {\n    acquired: number;\n    registered: number;\n}\n\nexport interface RequirementWithChildrenInit {\n    readonly name: string;\n    readonly description?: string;\n    readonly children: Iterable<Requirements>;\n    readonly creditsCount?: Range;\n}\n\nexport class RequirementWithChildren extends Requirement implements RequirementWithChildrenInit {\n    readonly description?: string;\n    readonly children: readonly Requirements[];\n    readonly creditsCount?: Range;\n    constructor({ name, description, children, creditsCount }: RequirementWithChildrenInit) {\n        super(name);\n        this.description = description\n        this.children = [...children];\n        this.creditsCount = creditsCount;\n    }\n    getRegisteredCreditsCount({ includesExcess, courseToStatus, courseToRequirement, selectionNameToOptionName, requirementToOthersCount }: {\n        includesExcess: boolean\n        courseToStatus: Map<Course, RegistrationStatus>,\n        courseToRequirement: Map<Course, Requirements>,\n        selectionNameToOptionName: ReadonlyMap<string, string>,\n        requirementToOthersCount: Map<RequirementWithCourses, RegisteredCreditsCounts>,\n    }): RegisteredCreditsCounts {\n        const creditsCounts = this.children.reduce(\n            (previous, child) => {\n                const childRegisteredCreditsCount = child.getRegisteredCreditsCount({ includesExcess, courseToStatus, courseToRequirement, selectionNameToOptionName, requirementToOthersCount });\n                return {\n                    acquired: previous.acquired + childRegisteredCreditsCount.acquired,\n                    registered: previous.registered + childRegisteredCreditsCount.registered,\n                }\n            },\n            { acquired: 0, registered: 0 }\n        );\n        return includesExcess || this.creditsCount === undefined ? creditsCounts : {\n            acquired: Math.min(this.creditsCount.max, creditsCounts.acquired),\n            registered: Math.min(this.creditsCount.max, creditsCounts.registered),\n        };\n    }\n    getRequiredCreditsCount(selectionNameToOptionName: ReadonlyMap<string, string>): Range {\n        return this.creditsCount === undefined ? this.children.reduce((previous, child) => {\n            const childRequiredCreditsCount = child.getRequiredCreditsCount(selectionNameToOptionName);\n            return {\n                min: previous.min + childRequiredCreditsCount.min,\n                max: previous.max + childRequiredCreditsCount.max,\n            }\n        }, { min: 0, max: 0 }) : this.creditsCount;\n    }\n    getStatus({ courseToStatus, courseToRequirement, selectionNameToOptionName, requirementToOthersCount }: {\n        courseToStatus: Map<Course, RegistrationStatus>,\n        courseToRequirement: Map<Course, Requirements>,\n        selectionNameToOptionName: ReadonlyMap<string, string>,\n        requirementToOthersCount: Map<RequirementWithCourses, RegisteredCreditsCounts>,\n    }): RegistrationStatus {\n        return Math.min(\n            super.getStatus({ courseToStatus, courseToRequirement, selectionNameToOptionName, requirementToOthersCount }),\n            ...this.children.map(child => child.getStatus({ courseToStatus, courseToRequirement, selectionNameToOptionName, requirementToOthersCount }))\n        );\n    };\n}\n\nexport interface RequirementWithCoursesInit {\n    readonly name: string;\n    readonly description?: string;\n    readonly courses: Iterable<Course>;\n    readonly creditsCount: Range;\n    readonly allowsOthers?: boolean;\n}\n\nexport class RequirementWithCourses extends Requirement {\n    readonly description?: string;\n    readonly courses: readonly Course[];\n    readonly creditsCount: Range;\n    readonly allowsOthers: boolean;\n    constructor({ name, description, courses, creditsCount, allowsOthers = false }: RequirementWithCoursesInit) {\n        super(name);\n        this.description = description;\n        this.courses = [...courses];\n        this.creditsCount = creditsCount;\n        this.allowsOthers = allowsOthers;\n    }\n    getRegisteredCreditsCount({ includesExcess, courseToStatus, courseToRequirement, requirementToOthersCount }: {\n        includesExcess: boolean\n        courseToStatus: Map<Course, RegistrationStatus>,\n        courseToRequirement: Map<Course, Requirements>,\n        requirementToOthersCount: Map<RequirementWithCourses, RegisteredCreditsCounts>,\n    }): RegisteredCreditsCounts {\n        const othersCount = requirementToOthersCount.get(this) || { acquired: 0, registered: 0 };\n        const creditsCounts = this.courses.reduce((previous, course): RegisteredCreditsCounts => {\n            const courseStatus = courseToStatus.get(course) || RegistrationStatus.Unregistered;\n            if (courseToRequirement.get(course) === this) {\n                return courseStatus === RegistrationStatus.Acquired ?\n                    {\n                        acquired: previous.acquired + course.creditsCount,\n                        registered: previous.registered + course.creditsCount,\n                    } :\n                    courseStatus === RegistrationStatus.Registered ?\n                        {\n                            acquired: previous.acquired,\n                            registered: previous.registered + course.creditsCount,\n                        } :\n                        previous;\n            } else {\n                return previous;\n            }\n        }, othersCount);\n        return includesExcess || this.creditsCount === undefined ? creditsCounts : {\n            acquired: Math.min(this.creditsCount.max, creditsCounts.acquired),\n            registered: Math.min(this.creditsCount.max, creditsCounts.registered),\n        };\n    }\n    getRequiredCreditsCount() {\n        return this.creditsCount;\n    }\n}\n\nexport interface SelectionRequirementInit {\n    readonly name: string;\n    readonly selectionName: string;\n    readonly options: Iterable<{\n        name: string;\n        requirement: Requirements;\n    }>;\n}\n\nexport class SelectionRequirement extends Requirement implements SelectionRequirementInit {\n    readonly selectionName: string;\n    readonly options: {\n        name: string;\n        requirement: Requirements;\n    }[];\n    readonly optionNameToRequirement: ReadonlyMap<string, Requirements>;\n    constructor({ name, selectionName, options: options0 }: SelectionRequirementInit) {\n        super(name);\n        this.selectionName = selectionName;\n        const options = [...options0]\n        this.options = options;\n        this.optionNameToRequirement = new Map(options.map(({ name, requirement }) => [name, requirement]));\n    }\n    getSelectedOptionName(selectionNameToOptionName: ReadonlyMap<string, string>) {\n        const selectedOptionName = selectionNameToOptionName.get(this.selectionName) || this.options[0].name;\n        return selectedOptionName;\n    }\n    getSelectedRequirement(selectionNameToOptionName: ReadonlyMap<string, string>) {\n        const selectedOptionName = this.getSelectedOptionName(selectionNameToOptionName);\n        const selectedRequirement = this.optionNameToRequirement.get(selectedOptionName);\n        return selectedRequirement;\n    }\n    getRegisteredCreditsCount({ includesExcess, courseToStatus, courseToRequirement, selectionNameToOptionName, requirementToOthersCount }: {\n        includesExcess: boolean;\n        courseToStatus: Map<Course, RegistrationStatus>;\n        courseToRequirement: Map<Course, Requirements>;\n        selectionNameToOptionName: ReadonlyMap<string, string>;\n        requirementToOthersCount: Map<RequirementWithCourses, RegisteredCreditsCounts>;\n    }): RegisteredCreditsCounts {\n        const selectedRequirement = this.getSelectedRequirement(selectionNameToOptionName);\n        if (selectedRequirement === undefined) {\n            return { acquired: 0, registered: 0 };\n        } else {\n            return selectedRequirement.getRegisteredCreditsCount({ includesExcess, courseToStatus, courseToRequirement, selectionNameToOptionName, requirementToOthersCount });\n        }\n    }\n    getRequiredCreditsCount(selectionNameToOptionName: ReadonlyMap<string, string>): Range {\n        const selectedRequirement = this.getSelectedRequirement(selectionNameToOptionName);\n        if (selectedRequirement === undefined) {\n            return { min: 0, max: 0 };\n        } else {\n            return selectedRequirement.getRequiredCreditsCount(selectionNameToOptionName);\n        }\n    }\n}\n","import { $array, $number, $object, $optional, $string, $union, isCompatible, $boolean } from \"@hiroto/json-type-checker\";\nimport React from \"react\";\nimport { Form } from \"react-bootstrap\";\nimport Course from \"./Course.js\";\nimport courses0 from './courses1.json';\nimport Requirements, { isRange, Range, RequirementWithChildren, RequirementWithCourses, SelectionRequirement } from \"./Requirements\";\nimport coins17_0 from './requirements/coins17.json';\nimport mast17_0 from './requirements/mast17.json';\nimport klis17_0 from './requirements/klis17.json';\n\nconst courses: unknown = courses0;\n\nif (!isCompatible(courses, $array($object({\n    title: $string,\n    code: $string,\n    creditsCount: $number,\n})))) {\n    throw new Error('科目定義が不正です');\n}\n\nconst codeToCourse = new Map<string, Course>();\nfor (const course of courses) {\n    codeToCourse.set(course.code, course);\n}\n\nconst numberOrRangeToRange = (numberOrRange: number | Range) =>\n    isRange(numberOrRange) ? numberOrRange : {\n        min: numberOrRange,\n        max: numberOrRange,\n    };\n\nconst convertJSONToRichRequirement = (json: unknown, selectionNameToCount: Map<string, number>): Requirements => {\n    if (isCompatible(json, $object({\n        name: $string,\n        description: $optional($string),\n        creditsCount: $union($number, $object({\n            min: $number,\n            max: $number,\n        })),\n        courses: $array($string),\n        allowsOthers: $optional($boolean),\n    }))) {\n        return new RequirementWithCourses({\n            name: json.name,\n            description: json.description,\n            creditsCount: numberOrRangeToRange(json.creditsCount),\n            courses: json.courses.map(courseCode => {\n                const course = codeToCourse.get(courseCode);\n                if (course === undefined) { throw new Error(`要件定義が不正です。科目番号 ${courseCode} は定義されていません。`); }\n                return course;\n            }),\n            allowsOthers: json.allowsOthers,\n        });\n    } else if (isCompatible(json, $object({\n        name: $string,\n        description: $optional($string),\n        children: $array($object({})),\n        creditsCount: $optional($union(\n            $number,\n            $object({\n                min: $number,\n                max: $number,\n            }),\n        )),\n    }))) {\n        return new RequirementWithChildren({\n            name: json.name,\n            description: json.description,\n            children: json.children.map(child => convertJSONToRichRequirement(child, selectionNameToCount)),\n            creditsCount: json.creditsCount === undefined ? undefined : numberOrRangeToRange(json.creditsCount),\n        });\n    } else if (isCompatible(json, $object({\n        selectionName: $string,\n        options: $array($object({})),\n    }))) {\n        const selectionCount = selectionNameToCount.get(json.selectionName) || 0;\n        selectionNameToCount.set(json.selectionName, selectionCount + 1);\n        return new SelectionRequirement({\n            name: `${json.selectionName}_${selectionCount}`,\n            selectionName: json.selectionName,\n            options: json.options.map(option => {\n                if (isCompatible(option, $object({\n                    name: $string,\n                    requirement: $object({}),\n                }))) {\n                    return {\n                        name: option.name,\n                        requirement: convertJSONToRichRequirement(option.requirement, selectionNameToCount),\n                    };\n                } else {\n                    const requirement = convertJSONToRichRequirement(option, selectionNameToCount);\n                    return {\n                        name: requirement.name,\n                        requirement\n                    };\n                }\n            }),\n        })\n    } else {\n        throw new Error('要件定義が不正です。')\n    }\n}\n\nconst requirements = {\n    coins17: convertJSONToRichRequirement(coins17_0, new Map()),\n    mast17: convertJSONToRichRequirement(mast17_0, new Map()),\n    klis17: convertJSONToRichRequirement(klis17_0, new Map()),\n};\n\nconsole.log(requirements);\n\nexport const defaultRequirement = requirements.coins17;\n\nconst RequirementSelector = ({ onChange }: { onChange: (requirement: Requirements) => void }) => {\n    return (\n        <Form.Group>\n            <Form.Label>学類を選択</Form.Label>\n            <Form.Control as=\"select\" onChange={e => {\n                const newRequirementName = (e.target as HTMLSelectElement).value as keyof typeof requirements;\n                onChange(requirements[newRequirementName]);\n            }}>\n                <option value=\"coins17\">情報科学類（2017年度入学）</option>\n                <option value=\"mast17\">情報メディア創成学類（2017年度入学）</option>\n                <option value=\"klis17\">知識情報・図書館学類（2017年度入学）</option>\n            </Form.Control>\n        </Form.Group>\n    )\n};\n\nexport default RequirementSelector;","import React from 'react';\nimport { Badge, ListGroup } from \"react-bootstrap\";\nimport Course from \"./Course\";\nimport RegistrationStatus from \"./RegistrationStatus\";\nimport Requirements, { RequirementWithCourses } from \"./Requirements\";\n\nconst CourseListItem = ({ course, status, onClick, currentRequirement, newRequirement, disabled }: {\n    course: Course,\n    status: RegistrationStatus,\n    onClick: () => void,\n    currentRequirement: Requirements | undefined,\n    newRequirement: Requirements,\n    disabled: boolean,\n}) => (\n        <ListGroup.Item action disabled={disabled} onClick={onClick}\n            variant={\n                status === RegistrationStatus.Unregistered ? undefined :\n                    currentRequirement === newRequirement ?\n                        status === RegistrationStatus.Acquired ? 'success' : 'primary' :\n                        'dark'\n            }>\n            <div className=\"d-flex justify-content-between align-items-center\">\n                <div>\n                    <div>{course.title}</div>\n                    <code>{course.code}</code>\n                </div>\n                <div className=\"ml-2 text-right flex-shrink-0\">\n                    {\n                        status === RegistrationStatus.Unregistered || currentRequirement === newRequirement ?\n                            (<></>) :\n                            currentRequirement === undefined ?\n                                (<Badge variant=\"secondary\">?</Badge>) :\n                                (<Badge variant=\"warning\">!</Badge>)\n                    }\n                    <Badge variant={status === RegistrationStatus.Acquired ? 'success' : status === RegistrationStatus.Registered ? 'primary' : 'secondary'}>\n                        {status === RegistrationStatus.Acquired ? '修得済み' : status === RegistrationStatus.Registered ? '履修する' : '履修しない'}\n                    </Badge>\n                    <div><span className=\"text-muted\">単位数</span> <strong>{course.creditsCount}</strong></div>\n                </div>\n            </div>\n        </ListGroup.Item>\n    );\n\nconst CourseList = ({ requirement, courses, courseToStatus, courseToRequirement, onCourseClick }: {\n    requirement: RequirementWithCourses,\n    courses: readonly Course[],\n    courseToStatus: Map<Course, RegistrationStatus>,\n    courseToRequirement: Map<Course, Requirements>,\n    onCourseClick: (course: Course) => void,\n}) => (\n        <ListGroup>\n            {\n                courses.map((course: Course) => (\n                    <CourseListItem key={course.code} course={course}\n                        currentRequirement={courseToRequirement.get(course)}\n                        newRequirement={requirement}\n                        status={courseToStatus.get(course) || RegistrationStatus.Unregistered}\n                        onClick={() => onCourseClick(course)}\n                        disabled={\n                            (!courseToStatus.has(course) || courseToStatus.get(course) === RegistrationStatus.Unregistered) &&\n                            [...courseToStatus.entries()]\n                                .filter(([_, status]) => status !== RegistrationStatus.Unregistered)\n                                .map(([course, _]) => course.title)\n                                .includes(course.title)\n                        } />\n                ))\n            }\n        </ListGroup>\n    );\n\nexport default CourseList;","import React, { useState } from 'react';\nimport { Accordion, Badge, Button, ButtonToolbar, Card, Col, Dropdown, Form, ListGroup } from \"react-bootstrap\";\nimport Course from \"./Course\";\nimport CourseList from \"./CourseList\";\nimport RegistrationStatus from \"./RegistrationStatus\";\nimport Requirements, { RegisteredCreditsCounts, RequirementWithChildren, RequirementWithCourses, SelectionRequirement } from \"./Requirements\";\n\nconst CreditsCountLabelDelimiter = () => (<span className=\"text-muted\"> / </span>)\n\nconst ExceededCreditsCountLabel = ({ creditsCount }: { creditsCount: number }) => (\n    <>\n        <span className=\"text-muted\">(</span>\n        +{creditsCount}\n        <span className=\"text-muted\">)</span>\n    </>\n);\n\nconst CreditsCountLabels = ({ requirement, courseToStatus, courseToRequirement, selectionNameToOptionName, requirementToOthersCount }: {\n    requirement: Requirements,\n    courseToStatus: Map<Course, RegistrationStatus>,\n    courseToRequirement: Map<Course, Requirements>,\n    selectionNameToOptionName: ReadonlyMap<string, string>,\n    requirementToOthersCount: Map<RequirementWithCourses, RegisteredCreditsCounts>,\n}) => {\n    const creditsCount = requirement.getRegisteredCreditsCount({ courseToRequirement, courseToStatus, selectionNameToOptionName, requirementToOthersCount, includesExcess: false });\n    const exceededCreditsCount = requirement.getRegisteredCreditsCount({ courseToRequirement, courseToStatus, selectionNameToOptionName, requirementToOthersCount, includesExcess: true });\n    const requiredCreditsCount = requirement.getRequiredCreditsCount(selectionNameToOptionName);\n\n    return (\n        <div>\n            <span>\n                <span className=\"text-muted\">習得</span>\n                <> </>\n                <strong className=\"text-success\">{creditsCount.acquired}</strong>\n                {exceededCreditsCount.acquired > creditsCount.acquired ? (<ExceededCreditsCountLabel creditsCount={exceededCreditsCount.acquired - creditsCount.acquired} />) : (<></>)}\n            </span>\n            <CreditsCountLabelDelimiter />\n            <span>\n                <span className=\"text-muted\">履修</span>\n                <> </>\n                <strong className=\"text-primary\">{creditsCount.registered}</strong>\n                {exceededCreditsCount.registered > creditsCount.registered ? (<ExceededCreditsCountLabel creditsCount={exceededCreditsCount.registered - creditsCount.registered} />) : (<></>)}\n            </span>\n            <CreditsCountLabelDelimiter />\n            <span>\n                <span className=\"text-muted\">必要</span>\n                <> </>\n                <strong>\n                    {\n                        requiredCreditsCount.min === requiredCreditsCount.max ?\n                            requiredCreditsCount.min :\n                            `${requiredCreditsCount.min}~${requiredCreditsCount.max}`\n                    }\n                </strong>\n            </span>\n        </div>\n    )\n};\n\nexport const RequirementSummaryView = ({ requirement, courseToStatus, courseToRequirement, selectionNameToOptionName, requirementToOthersCount }: {\n    requirement: RequirementWithChildren | RequirementWithCourses,\n    courseToStatus: Map<Course, RegistrationStatus>,\n    courseToRequirement: Map<Course, Requirements>,\n    selectionNameToOptionName: ReadonlyMap<string, string>,\n    requirementToOthersCount: Map<RequirementWithCourses, RegisteredCreditsCounts>,\n}) => {\n    const status = requirement.getStatus({ courseToStatus, courseToRequirement, selectionNameToOptionName, requirementToOthersCount });\n    return (\n        <>\n            <h5 className=\"d-flex justify-content-between align-items-center\">\n                <div>{requirement.name}</div>\n                <Badge className=\"ml-2 flex-shrink-0\" variant={status === RegistrationStatus.Acquired ? 'success' : status === RegistrationStatus.Registered ? 'primary' : 'secondary'}>\n                    {status === RegistrationStatus.Acquired ? '修得OK' : status === RegistrationStatus.Registered ? '履修OK' : '不足'}\n                </Badge>\n            </h5>\n            <div>\n                {requirement.description === undefined ? (<></>) : (<div className=\"text-muted\">{requirement.description}</div>)}\n                <CreditsCountLabels\n                    requirement={requirement}\n                    courseToStatus={courseToStatus} courseToRequirement={courseToRequirement}\n                    selectionNameToOptionName={selectionNameToOptionName} requirementToOthersCount={requirementToOthersCount}\n                />\n            </div>\n        </>\n    );\n}\n\nconst RequirementWithChildrenView = ({ requirement, showsOnlyRegistered, courseToStatus, courseToRequirement, selectionNameToOptionName, requirementToOthersCount, onCourseClick, onOthersCountsChange, onSelectionChange }: {\n    requirement: RequirementWithChildren,\n    showsOnlyRegistered: boolean,\n    courseToStatus: Map<Course, RegistrationStatus>,\n    courseToRequirement: Map<Course, RequirementWithCourses>,\n    selectionNameToOptionName: ReadonlyMap<string, string>,\n    requirementToOthersCount: Map<RequirementWithCourses, RegisteredCreditsCounts>,\n    onCourseClick: (course: Course, requirement: RequirementWithCourses) => void,\n    onOthersCountsChange: (requirement: RequirementWithCourses, newOthersCount: RegisteredCreditsCounts) => void,\n    onSelectionChange: (selectionName: string, newOptionName: string) => void,\n}) => (\n        <>\n            <RequirementSummaryView\n                requirement={requirement}\n                courseToStatus={courseToStatus} courseToRequirement={courseToRequirement}\n                selectionNameToOptionName={selectionNameToOptionName} requirementToOthersCount={requirementToOthersCount}\n            />\n            <ListGroup className=\"mt-3\">\n                {\n                    requirement.children.map(child => (\n                        <ListGroup.Item key={child.name}>\n                            <RequirementView\n                                requirement={child} showsOnlyRegistered={showsOnlyRegistered}\n                                courseToStatus={courseToStatus} courseToRequirement={courseToRequirement} selectionNameToOptionName={selectionNameToOptionName}\n                                onCourseClick={onCourseClick} onSelectionChange={onSelectionChange}\n                                onOthersCountsChange={onOthersCountsChange} requirementToOthersCount={requirementToOthersCount}\n                            />\n                        </ListGroup.Item>\n                    ))\n                }\n            </ListGroup>\n        </>\n    );\n\nconst OthersCountInput = ({ currentOthersCount, onReturn, onHide }: {\n    currentOthersCount: RegisteredCreditsCounts,\n    onReturn: (newOthersCount: RegisteredCreditsCounts) => void,\n    onHide: () => void,\n}) => {\n    const [acquired, setAcquired] = useState(undefined as number | undefined);\n    const [registeredExcludingAcquired, setRegisteredExcludingAcquired] = useState(undefined as number | undefined);\n    const [registeredIncludingAcquired, setRegisteredIncludingAcquired] = useState(undefined as number | undefined);\n\n    const computed = {\n        acquired: acquired || currentOthersCount.acquired,\n        registered:\n            registeredIncludingAcquired !== undefined ?\n                registeredIncludingAcquired :\n                registeredExcludingAcquired !== undefined ?\n                    (acquired !== undefined ? acquired : currentOthersCount.acquired) + registeredExcludingAcquired :\n                    acquired !== undefined ?\n                        currentOthersCount.registered + acquired - currentOthersCount.acquired :\n                        currentOthersCount.registered,\n    }\n\n    return (\n        <Card body border=\"primary\">\n            <Form onSubmit={(e: React.FormEvent<HTMLFormElement>) => {\n                e.preventDefault();\n                onReturn(computed);\n                onHide();\n            }}>\n                <Form.Row>\n                    <Form.Group as={Col} md=\"4\" controlId=\"validationCustom01\">\n                        <Form.Label>習得済みの単位数 <span className=\"text-muted\">(a)</span></Form.Label>\n                        <Form.Control\n                            type=\"number\" min={0}\n                            placeholder={`${computed.acquired}`}\n                            value={acquired === undefined ? '' : `${acquired}`}\n                            onChange={\n                                (e: React.ChangeEvent<HTMLInputElement>) =>\n                                    setAcquired(e.target.value === '' ? undefined : +e.target.value)\n                            }\n                            isInvalid={computed.acquired < 0}\n                        />\n                        <Form.Control.Feedback type=\"invalid\">(a) &gt;= 0</Form.Control.Feedback>\n                    </Form.Group>\n                    <Form.Group as={Col} md=\"4\" controlId=\"validationCustom02\">\n                        <Form.Label>履修する単位数 <span className=\"text-muted\">(b)</span></Form.Label>\n                        <Form.Control\n                            type=\"number\" min={0}\n                            placeholder={`${computed.registered - computed.acquired}`}\n                            value={registeredExcludingAcquired === undefined ? '' : `${registeredExcludingAcquired}`}\n                            onChange={\n                                (e: React.ChangeEvent<HTMLInputElement>) => {\n                                    if (e.target.value === '') {\n                                        setRegisteredExcludingAcquired(undefined);\n                                    } else {\n                                        setRegisteredExcludingAcquired(+e.target.value);\n                                        setRegisteredIncludingAcquired(undefined);\n                                    }\n                                }\n                            }\n                            isInvalid={computed.acquired > computed.registered}\n                        />\n                        <Form.Control.Feedback type=\"invalid\">(b) &gt;= 0</Form.Control.Feedback>\n                    </Form.Group>\n                    <Form.Group as={Col} md=\"4\" controlId=\"validationCustom02\">\n                        <Form.Label>計 <span className=\"text-muted\">(a) + (b)</span></Form.Label>\n                        <Form.Control\n                            type=\"number\" min={0}\n                            placeholder={`${computed.registered}`}\n                            value={registeredIncludingAcquired === undefined ? '' : `${registeredIncludingAcquired}`}\n                            onChange={\n                                (e: React.ChangeEvent<HTMLInputElement>) => {\n                                    if (e.target.value === '') {\n                                        setRegisteredIncludingAcquired(undefined);\n                                    } else {\n                                        setRegisteredIncludingAcquired(+e.target.value);\n                                        setRegisteredExcludingAcquired(undefined);\n                                    }\n                                }\n                            }\n                        />\n                    </Form.Group>\n                </Form.Row>\n                <ButtonToolbar>\n                    <Button\n                        type=\"submit\"\n                        disabled={computed.acquired < 0 || computed.acquired > computed.registered}\n                    >OK</Button>\n                    <Button variant=\"secondary\" onClick={onHide}>キャンセル</Button>\n                </ButtonToolbar>\n            </Form>\n        </Card>\n    )\n}\n\nconst RequirementWithCoursesView = ({ requirement, showsOnlyRegistered, courseToStatus, courseToRequirement, onCourseClick, onOthersCountsChange, selectionNameToOptionName, requirementToOthersCount }: {\n    requirement: RequirementWithCourses,\n    showsOnlyRegistered: boolean,\n    courseToStatus: Map<Course, RegistrationStatus>,\n    courseToRequirement: Map<Course, Requirements>,\n    selectionNameToOptionName: ReadonlyMap<string, string>,\n    requirementToOthersCount: Map<RequirementWithCourses, RegisteredCreditsCounts>,\n    onCourseClick: (course: Course, requirement: RequirementWithCourses) => void,\n    onOthersCountsChange: (newOthersCount: RegisteredCreditsCounts) => void,\n}) => {\n    const [isOpen, setIsOpen] = useState(false);\n    const [showsInput, setShowsInput] = useState(false);\n\n    const courses = requirement.courses.filter(course =>\n        !showsOnlyRegistered || (courseToStatus.get(course) !== RegistrationStatus.Unregistered &&\n            requirement === courseToRequirement.get(course)));\n\n    return (\n        <>\n            <Accordion activeKey={isOpen ? '0' : ''}>\n                <div className={`bg-white ${isOpen ? 'sticky-top' : ''}`}>\n                    <RequirementSummaryView\n                        requirement={requirement}\n                        courseToStatus={courseToStatus} courseToRequirement={courseToRequirement}\n                        selectionNameToOptionName={selectionNameToOptionName} requirementToOthersCount={requirementToOthersCount}\n                    />\n                    {\n                        courses.length === 0 ?\n                            requirement.allowsOthers ? (\n                                showsInput ? (<></>) : (\n                                    <Button block className=\"mt-3\" variant=\"secondary\" onClick={() => setShowsInput(true)}>\n                                        単位数を入力\n                                    </Button>\n                                )\n                            ) : (\n                                    <Button block className=\"mt-3\" variant=\"outline-secondary\" disabled>\n                                        {showsOnlyRegistered ? '履修する' : ''}科目はありません\n                                    </Button>\n                                ) : (\n                                <Button\n                                    block className=\"mt-3\"\n                                    onClick={() => setIsOpen(!isOpen)}\n                                    variant={isOpen ? 'primary' : 'outline-secondary'}\n                                >\n                                    {showsOnlyRegistered ? '履修する' : ''}科目を{isOpen ? '非' : ''}表示\n                                </Button>\n                            )\n                    }\n                </div>\n                {\n                    showsInput ? (\n                        <div className=\"mt-3\">\n                            <OthersCountInput\n                                currentOthersCount={requirementToOthersCount.get(requirement) || { acquired: 0, registered: 0 }}\n                                onReturn={onOthersCountsChange} onHide={() => setShowsInput(false)}\n                            />\n                        </div>\n                    ) : (<></>)\n                }\n                <Accordion.Collapse eventKey=\"0\">\n                    {\n                        courses.length === 0 ? (<></>) : (\n                            <div className=\"mt-3\">\n                                <CourseList requirement={requirement} courses={courses}\n                                    courseToStatus={courseToStatus} courseToRequirement={courseToRequirement}\n                                    onCourseClick={course => onCourseClick(course, requirement)} />\n                            </div>\n                        )\n                    }\n                </Accordion.Collapse>\n            </Accordion>\n        </>\n    );\n}\n\nconst SelectionRequirementView = ({ requirement, showsOnlyRegistered, courseToStatus, courseToRequirement, selectionNameToOptionName, requirementToOthersCount, onCourseClick, onOthersCountsChange, onSelectionChange }: {\n    requirement: SelectionRequirement,\n    showsOnlyRegistered: boolean,\n    courseToStatus: Map<Course, RegistrationStatus>,\n    courseToRequirement: Map<Course, RequirementWithCourses>,\n    selectionNameToOptionName: ReadonlyMap<string, string>,\n    requirementToOthersCount: Map<RequirementWithCourses, RegisteredCreditsCounts>,\n    onCourseClick: (course: Course, requirement: RequirementWithCourses) => void,\n    onOthersCountsChange: (requirement: RequirementWithCourses, newOthersCount: RegisteredCreditsCounts) => void,\n    onSelectionChange: (selectionName: string, newOptionName: string) => void,\n}) => {\n    const selectedOptionName = requirement.getSelectedOptionName(selectionNameToOptionName);\n    const selectedRequirement = requirement.getSelectedRequirement(selectionNameToOptionName);\n\n    const handleOptionClick = (newOptionName: string) => {\n        if (selectedOptionName !== newOptionName) {\n            onSelectionChange(requirement.selectionName, newOptionName);\n        }\n    };\n\n    return (\n        <>\n            <Dropdown>\n                <Dropdown.Toggle id=\"\" variant=\"secondary\">\n                    <span style={{\n                        overflow: 'hidden',\n                        textOverflow: 'ellipsis',\n                    }}>\n                        {requirement.selectionName}\n                        <> : </>\n                        <strong>{selectedOptionName}</strong>\n                    </span>\n                </Dropdown.Toggle>\n\n                <Dropdown.Menu style={{ zIndex: 1100 }}>\n                    {\n                        requirement.options.map(option => (\n                            <Dropdown.Item key={option.name}\n                                active={option.name === selectedOptionName}\n                                onClick={() => handleOptionClick(option.name)}\n                            >\n                                {option.name}\n                            </Dropdown.Item>\n                        ))\n                    }\n                </Dropdown.Menu>\n            </Dropdown>\n            {\n                selectedRequirement === undefined ? (<></>) : (\n                    <div className=\"mt-3\">\n                        <RequirementView\n                            requirement={selectedRequirement}\n                            showsOnlyRegistered={showsOnlyRegistered}\n                            courseToStatus={courseToStatus} courseToRequirement={courseToRequirement}\n                            selectionNameToOptionName={selectionNameToOptionName} requirementToOthersCount={requirementToOthersCount}\n                            onCourseClick={onCourseClick} onOthersCountsChange={onOthersCountsChange}\n                            onSelectionChange={onSelectionChange}\n                        />\n                    </div>\n                )\n            }\n        </>\n    );\n}\n\nconst RequirementView = ({ requirement, showsOnlyRegistered, courseToStatus, courseToRequirement, onCourseClick, onOthersCountsChange, onSelectionChange, selectionNameToOptionName, requirementToOthersCount }: {\n    requirement: Requirements,\n    showsOnlyRegistered: boolean,\n    courseToStatus: Map<Course, RegistrationStatus>,\n    courseToRequirement: Map<Course, RequirementWithCourses>,\n    selectionNameToOptionName: ReadonlyMap<string, string>,\n    requirementToOthersCount: Map<RequirementWithCourses, RegisteredCreditsCounts>,\n    onCourseClick: (course: Course, requirement: RequirementWithCourses) => void,\n    onOthersCountsChange: (requirement: RequirementWithCourses, newOthersCount: RegisteredCreditsCounts) => void,\n    onSelectionChange: (selectionName: string, newOptionName: string) => void,\n}) => {\n    if (requirement instanceof RequirementWithChildren) {\n        return (\n            <RequirementWithChildrenView\n                requirement={requirement} showsOnlyRegistered={showsOnlyRegistered}\n                courseToStatus={courseToStatus} courseToRequirement={courseToRequirement}\n                selectionNameToOptionName={selectionNameToOptionName} requirementToOthersCount={requirementToOthersCount}\n                onCourseClick={onCourseClick} onOthersCountsChange={onOthersCountsChange} onSelectionChange={onSelectionChange}\n            />\n        )\n    } else if (requirement instanceof RequirementWithCourses) {\n        return (\n            <RequirementWithCoursesView\n                requirement={requirement} showsOnlyRegistered={showsOnlyRegistered}\n                courseToStatus={courseToStatus} courseToRequirement={courseToRequirement}\n                selectionNameToOptionName={selectionNameToOptionName} requirementToOthersCount={requirementToOthersCount}\n                onCourseClick={onCourseClick}\n                onOthersCountsChange={creditsCounts => onOthersCountsChange(requirement, creditsCounts)}\n            />\n        )\n    } else {\n        return (\n            <SelectionRequirementView\n                requirement={requirement} showsOnlyRegistered={showsOnlyRegistered}\n                courseToStatus={courseToStatus} courseToRequirement={courseToRequirement}\n                selectionNameToOptionName={selectionNameToOptionName} requirementToOthersCount={requirementToOthersCount}\n                onCourseClick={onCourseClick} onOthersCountsChange={onOthersCountsChange} onSelectionChange={onSelectionChange}\n            />\n        );\n    }\n}\n\nexport default RequirementView;\n","import React, { useState } from \"react\";\nimport { Button, Card, Modal } from \"react-bootstrap\";\nimport Course from \"./Course\";\nimport RegistrationStatus from \"./RegistrationStatus\";\nimport Requirements, { RegisteredCreditsCounts, RequirementWithCourses } from \"./Requirements\";\nimport { RequirementSummaryView } from \"./RequirementView\";\n\nconst CourseMovementConfirmationModal = ({ currentRequirement, courseToStatus, courseToRequirement, selectionNameToOptionName, requirementToOthersCount, onReturn, onExited }: {\n    currentRequirement: RequirementWithCourses,\n    courseToStatus: Map<Course, RegistrationStatus>,\n    courseToRequirement: Map<Course, Requirements>,\n    selectionNameToOptionName: ReadonlyMap<string, string>,\n    requirementToOthersCount: Map<RequirementWithCourses, RegisteredCreditsCounts>,\n    onReturn: (value: boolean) => void,\n    onExited: () => void,\n}) => {\n    const [show, setShow] = useState(true);\n\n    return (\n        <Modal show={show} onHide={() => { setShow(false); onReturn(false); }} onExited={onExited}>\n            <Modal.Body>\n                <p>\n                    この科目はすでに以下の要件に割り当てられています。\n                    <strong>続けると、この要件への割り当ては解除されます。</strong>\n                </p>\n                <p>各科目に割り当てできる要件は1つまでです。</p>\n                <Card body>\n                    <RequirementSummaryView\n                        requirement={currentRequirement}\n                        courseToStatus={courseToStatus} courseToRequirement={courseToRequirement}\n                        selectionNameToOptionName={selectionNameToOptionName} requirementToOthersCount={requirementToOthersCount}\n                    />\n                </Card>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"secondary\" onClick={() => { setShow(false); onReturn(false); }}>キャンセル</Button>\n                <Button variant=\"primary\" onClick={() => { setShow(false); onReturn(true); }}>続ける</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n};\n\nexport default CourseMovementConfirmationModal;","import React from 'react';\n\nconst getValueFromModal = async <T, P>(\n    ModalType: (props: {\n        onReturn: (value: T) => void,\n        onExited: () => void,\n    } & P) => JSX.Element,\n    props: P,\n    modals: JSX.Element[],\n    setModals: React.Dispatch<React.SetStateAction<JSX.Element[]>>,\n): Promise<T> => new Promise((resolve, reject) => {\n    try {\n        const modal = (\n            <ModalType\n                {...props}\n                onReturn={value => resolve(value)}\n                onExited={() => setModals(newModals.filter(value => value !== modal))}\n            />\n        );\n        const newModals = [...modals, modal];\n        setModals(newModals);\n    } catch (e) {\n        reject(e);\n    }\n});\n\nexport default getValueFromModal;","import React, { useState } from 'react';\nimport { Form } from 'react-bootstrap';\nimport Course from './Course';\nimport CourseMovementConfirmationModal from './CourseMovementConfirmationModal';\nimport getValueFromModal from './getValueFromModal';\nimport RegistrationStatus from './RegistrationStatus';\nimport Requirements, { RegisteredCreditsCounts, RequirementWithChildren, RequirementWithCourses, SelectionRequirement } from './Requirements';\nimport RequirementView from './RequirementView';\n\nexport interface Plan {\n    readonly courseToStatus: Map<Course, RegistrationStatus>;\n    readonly courseToRequirement: Map<Course, RequirementWithCourses>;\n    readonly requirementToOthersCount: Map<RequirementWithCourses, RegisteredCreditsCounts>;\n    readonly selectionNameToOptionName: ReadonlyMap<string, string>;\n}\nexport const emptyPlan: Plan = {\n    courseToStatus: new Map(),\n    courseToRequirement: new Map(),\n    requirementToOthersCount: new Map(),\n    selectionNameToOptionName: new Map(),\n};\n\nconst RequirementsRootView = ({ requirement, plan, onChange }: {\n    requirement: Requirements,\n    plan: Plan,\n    onChange: (newPlan: Plan) => void,\n}) => {\n    const { courseToStatus, courseToRequirement, requirementToOthersCount, selectionNameToOptionName } = plan;\n\n    const [showsOnlyRegistered, setShowsOnlyRegistered] = useState(false);\n    const [modals, setModals] = useState(new Array<JSX.Element>());\n\n    const handleCourseClick = async (course: Course, requirement: RequirementWithCourses) => {\n        const currentStatus: RegistrationStatus = courseToStatus.get(course) || RegistrationStatus.Unregistered;\n        const currentRequirement = courseToRequirement.get(course);\n        let newCourseToStatus = courseToStatus;\n        if (currentStatus === RegistrationStatus.Unregistered || currentRequirement === requirement) {\n            newCourseToStatus = new Map([\n                ...courseToStatus,\n                [\n                    course,\n                    showsOnlyRegistered ?\n                        currentStatus === RegistrationStatus.Acquired ? RegistrationStatus.Registered : RegistrationStatus.Acquired :\n                        (currentStatus + 1) % 3\n                ]\n            ]);\n        } else if (\n            currentRequirement !== undefined &&\n            !await getValueFromModal(\n                CourseMovementConfirmationModal,\n                { currentRequirement, courseToStatus, courseToRequirement, selectionNameToOptionName, requirementToOthersCount },\n                modals, setModals\n            )\n        ) {\n            return;\n        }\n        onChange({\n            ...plan,\n            courseToStatus: newCourseToStatus,\n            courseToRequirement: new Map([...courseToRequirement, [course, requirement]]),\n        });\n    }\n\n    const clearCourseToRequirement = (requirement: Requirements, newCourseToRequirement: Map<Course, RequirementWithCourses>) => {\n        if (requirement instanceof RequirementWithChildren) {\n            for (const child of requirement.children) {\n                clearCourseToRequirement(child, newCourseToRequirement);\n            }\n        } else if (requirement instanceof RequirementWithCourses) {\n            for (const course of requirement.courses) {\n                if (newCourseToRequirement.get(course) === requirement) {\n                    newCourseToRequirement.delete(course);\n                }\n            }\n        } else {\n            const selectedRequirement = requirement.getSelectedRequirement(selectionNameToOptionName);\n            if (selectedRequirement !== undefined) {\n                clearCourseToRequirement(selectedRequirement, newCourseToRequirement);\n            }\n        }\n    }\n\n    const clearCourseToRequirementInSelection = (selectionName: string, requirement: Requirements, newCourseToRequirement: Map<Course, RequirementWithCourses>) => {\n        if (requirement instanceof RequirementWithChildren) {\n            for (const child of requirement.children) {\n                clearCourseToRequirementInSelection(selectionName, child, newCourseToRequirement);\n            }\n        } else if (requirement instanceof SelectionRequirement && requirement.selectionName === selectionName) {\n            clearCourseToRequirement(requirement, newCourseToRequirement);\n        }\n    }\n\n    const handleOthersCountsChange = (requirement: RequirementWithCourses, newOthersCount: RegisteredCreditsCounts) => {\n        onChange({\n            ...plan,\n            requirementToOthersCount: new Map([\n                ...requirementToOthersCount,\n                [requirement, newOthersCount]\n            ]),\n        });\n    }\n\n    const handleSelectionChange = (selectionName: string, newOptionName: string) => {\n        const newCourseToRequirement = new Map(courseToRequirement);\n        clearCourseToRequirementInSelection(selectionName, requirement, newCourseToRequirement);\n        onChange({\n            ...plan,\n            courseToRequirement: newCourseToRequirement,\n            selectionNameToOptionName: new Map([...selectionNameToOptionName, [selectionName, newOptionName]]),\n        });\n    }\n\n    return (\n        <>\n            {modals}\n            <Form.Check custom className=\"mb-3\" id=\"showsOnlyRegisteredCheck\"\n                label=\"履修する科目のみ表示する\"\n                checked={showsOnlyRegistered}\n                onChange={() => setShowsOnlyRegistered(!showsOnlyRegistered)}\n            />\n            <div className=\"my-3\">\n                <RequirementView\n                    requirement={requirement} showsOnlyRegistered={showsOnlyRegistered}\n                    courseToStatus={courseToStatus} courseToRequirement={courseToRequirement} selectionNameToOptionName={selectionNameToOptionName}\n                    onCourseClick={handleCourseClick} onOthersCountsChange={handleOthersCountsChange}\n                    onSelectionChange={handleSelectionChange} requirementToOthersCount={requirementToOthersCount}\n                />\n            </div>\n        </>\n    );\n}\n\nexport default RequirementsRootView;","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React, { useState } from 'react';\nimport { Alert, Container, Navbar } from 'react-bootstrap';\nimport './App.css';\nimport RequirementSelector, { defaultRequirement } from './RequirementSelector';\nimport RequirementsRootView, { emptyPlan } from './RequirementsRootView';\n\nconst App = () => {\n    const [requirement, setRequirement] = useState(defaultRequirement);\n    const [plan, setPlan] = useState(emptyPlan);\n\n    return (\n        <>\n            <Navbar variant=\"dark\" bg=\"dark\">\n                <Navbar.Brand>卒業要件を満たしたい</Navbar.Brand>\n            </Navbar>\n            <Container>\n                <Alert variant=\"danger\" className=\"mt-3\">\n                    このツールの結果を利用する場合、必ず履修要覧や支援室などでその結果が正しいことを確認するようにしてください。\n                    <strong>科目や要件の定義が誤っていたり、実際には認められない履修の組み合わせがある可能性があります。</strong>\n                </Alert>\n                <RequirementSelector onChange={requirement => {\n                    setRequirement(requirement);\n                    setPlan(emptyPlan);\n                }} />\n                <RequirementsRootView requirement={requirement} plan={plan} onChange={newPlan => setPlan(newPlan)} />\n            </Container>\n        </>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}