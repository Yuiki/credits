{"version":3,"sources":["RegistrationStatus.ts","Requirements.ts","CourseList.tsx","RequirementView.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["RegistrationStatus","Requirement","title","description","courseToStatus","courseToRequirement","selectionToRequirement","requiredCreditsCount","this","getRequiredCreditsCount","getRegisteredCreditsCount","status","Acquired","includesExcess","Registered","Unregistered","RequirementWithChildren","children","creditsCount","reduce","previous","child","undefined","Math","min","RequirementWithCourses","courses","allowsOthers","course","courseStatus","get","SelectionRequirement","choices","CourseListItem","onClick","currentRequirement","newRequirement","showsOnlyRegistered","disabled","ListGroup","Item","action","variant","window","confirm","className","code","Badge","CourseList","requirement","onCourseClick","map","key","nextStatus","has","entries","filter","includes","CreditsCountLabelDelimiter","CreditsCountLabels","acquiredCreditsCount","exceededAcquiredCreditsCount","registeredCreditsCount","exceededRegisteredCreditsCount","RequirementSummaryView","getStatus","RequirementWithChildrenView","onSelectionChange","RequirementWithCoursesView","useState","isOpen","setIsOpen","Accordion","activeKey","length","Button","block","size","Collapse","eventKey","SelectionRequirementView","Dropdown","Toggle","id","Menu","style","zIndex","choice","active","RequirementView","courses0","isCompatible","$array","$object","$string","$number","Error","codeToCourse","Map","set","convertJSONToRichRequirement","json","$optional","courseCode","requirements0","console","log","App","setCourseToStatus","setCourseToRequirement","setSelectionToRequirement","setShowsOnlyRegistered","Navbar","bg","Brand","Container","Alert","Form","Check","custom","label","checked","onChange","selection","chosen","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d7751c89.chunk.js","sourcesContent":["enum RegistrationStatus {\n    Unregistered = 0,\n    Registered = 1,\n    Acquired = 2,\n}\n\nexport default RegistrationStatus;","import Course from \"./Course\";\nimport RegistrationStatus from \"./RegistrationStatus\";\n\ntype Requirements = RequirementWithChildren | RequirementWithCourses | SelectionRequirement;\nexport default Requirements;\n\nabstract class Requirement {\n    constructor(readonly title: string, readonly description?: string) { }\n    abstract getRegisteredCreditsCount({ status, includesExcess, courseToStatus, courseToRequirement, selectionToRequirement }: {\n        status: RegistrationStatus,\n        includesExcess: boolean\n        courseToStatus: Map<Course, RegistrationStatus>,\n        courseToRequirement: Map<Course, Requirements>,\n        selectionToRequirement: Map<SelectionRequirement, Requirement>,\n    }): number;\n    abstract getRequiredCreditsCount(selectionToRequirement: Map<SelectionRequirement, Requirement>): number;\n    getStatus({ courseToStatus, courseToRequirement, selectionToRequirement }: {\n        courseToStatus: Map<Course, RegistrationStatus>,\n        courseToRequirement: Map<Course, Requirements>,\n        selectionToRequirement: Map<SelectionRequirement, Requirement>,\n    }): RegistrationStatus {\n        const requiredCreditsCount = this.getRequiredCreditsCount(selectionToRequirement);\n        return this.getRegisteredCreditsCount({ status: RegistrationStatus.Acquired, includesExcess: false, courseToStatus, courseToRequirement, selectionToRequirement }) >= requiredCreditsCount ?\n            RegistrationStatus.Acquired :\n            this.getRegisteredCreditsCount({ status: RegistrationStatus.Registered, includesExcess: false, courseToStatus, courseToRequirement, selectionToRequirement }) >= requiredCreditsCount ?\n                RegistrationStatus.Registered :\n                RegistrationStatus.Unregistered;\n    };\n}\n\nexport interface RequirementWithChildrenInit {\n    readonly title: string;\n    readonly description?: string;\n    readonly children: Iterable<Requirements>;\n    readonly creditsCount?: number;\n}\n\nexport class RequirementWithChildren extends Requirement implements RequirementWithChildrenInit {\n    readonly children: readonly Requirements[];\n    readonly creditsCount?: number;\n    constructor({ title, description, children, creditsCount }: RequirementWithChildrenInit) {\n        super(title, description);\n        this.children = [...children];\n        this.creditsCount = creditsCount;\n    }\n    getRegisteredCreditsCount({ status, includesExcess, courseToStatus, courseToRequirement, selectionToRequirement }: {\n        status: RegistrationStatus,\n        includesExcess: boolean\n        courseToStatus: Map<Course, RegistrationStatus>,\n        courseToRequirement: Map<Course, Requirements>,\n        selectionToRequirement: Map<SelectionRequirement, Requirement>,\n    }): number {\n        const creditsCount = this.children.reduce(\n            (previous, child) => previous + child.getRegisteredCreditsCount({ status, includesExcess, courseToStatus, courseToRequirement, selectionToRequirement }),\n            0);\n        return includesExcess || this.creditsCount === undefined ? creditsCount : Math.min(this.creditsCount, creditsCount);\n    }\n    getRequiredCreditsCount(selectionToRequirement: Map<SelectionRequirement, Requirement>): number {\n        return this.creditsCount === undefined ? this.children.reduce(\n            (previous, child) => previous + child.getRequiredCreditsCount(selectionToRequirement),\n            0) : this.creditsCount;\n    }\n}\n\nexport interface RequirementWithCoursesInit {\n    readonly title: string;\n    readonly description?: string;\n    readonly courses: Iterable<Course>;\n    readonly creditsCount: number;\n    readonly allowsOthers?: boolean;\n}\n\nexport class RequirementWithCourses extends Requirement {\n    readonly courses: readonly Course[];\n    readonly creditsCount: number;\n    readonly allowsOthers: boolean;\n    constructor({ title, description, courses, creditsCount, allowsOthers = false }: RequirementWithCoursesInit) {\n        super(title, description);\n        this.courses = [...courses];\n        this.creditsCount = creditsCount;\n        this.allowsOthers = allowsOthers;\n    }\n    getRegisteredCreditsCount({ status, includesExcess, courseToStatus, courseToRequirement }: {\n        status: RegistrationStatus,\n        includesExcess: boolean\n        courseToStatus: Map<Course, RegistrationStatus>,\n        courseToRequirement: Map<Course, Requirements>,\n    }): number {\n        const creditsCount = this.courses.reduce(\n            (previous, course) => {\n                const courseStatus = courseToStatus.get(course) || 0;\n                return courseToRequirement.get(course) === this && courseStatus >= status ? previous + course.creditsCount : previous;\n            },\n            0);\n        return includesExcess || this.creditsCount === undefined ? creditsCount : Math.min(this.creditsCount, creditsCount);\n    }\n    getRequiredCreditsCount() {\n        return this.creditsCount;\n    }\n}\n\nexport interface SelectionRequirementInit {\n    readonly title: string;\n    readonly description?: string;\n    readonly choices: Iterable<Requirements>\n}\n\nexport class SelectionRequirement extends Requirement implements SelectionRequirementInit {\n    readonly choices: readonly Requirements[]\n    constructor({ title, description, choices }: SelectionRequirementInit) {\n        super(title, description);\n        this.choices = [...choices];\n    }\n    getRegisteredCreditsCount({ status, includesExcess, courseToStatus, courseToRequirement, selectionToRequirement }: {\n        status: RegistrationStatus,\n        includesExcess: boolean\n        courseToStatus: Map<Course, RegistrationStatus>,\n        courseToRequirement: Map<Course, Requirements>,\n        selectionToRequirement: Map<SelectionRequirement, Requirement>,\n    }): number {\n        return (selectionToRequirement.get(this) || this.choices[0]).getRegisteredCreditsCount({ status, includesExcess, courseToStatus, courseToRequirement, selectionToRequirement });\n    }\n    getRequiredCreditsCount(selectionToRequirement: Map<SelectionRequirement, Requirement>): number {\n        return (selectionToRequirement.get(this) || this.choices[0]).getRequiredCreditsCount(selectionToRequirement);\n    }\n}","import React from 'react';\nimport { Badge, ListGroup } from \"react-bootstrap\";\nimport Course from \"./Course\";\nimport RegistrationStatus from \"./RegistrationStatus\";\nimport Requirements, { RequirementWithCourses } from \"./Requirements\";\n\nconst CourseListItem = ({ course, status, onClick, currentRequirement, newRequirement, showsOnlyRegistered, disabled }: {\n    course: Course,\n    status: RegistrationStatus,\n    onClick: (nextStatus: RegistrationStatus) => void,\n    currentRequirement: Requirements | undefined,\n    newRequirement: Requirements,\n    showsOnlyRegistered: boolean,\n    disabled: boolean,\n}) => (\n        <ListGroup.Item action\n            disabled={disabled}\n            variant={\n                status === RegistrationStatus.Unregistered ? undefined :\n                    currentRequirement === newRequirement ?\n                        status === RegistrationStatus.Acquired ? 'success' : 'primary' :\n                        'dark'\n            }\n            onClick={() => {\n                if (status === RegistrationStatus.Unregistered || currentRequirement === newRequirement) {\n                    onClick(\n                        showsOnlyRegistered ?\n                            status === RegistrationStatus.Acquired ? RegistrationStatus.Registered : RegistrationStatus.Acquired :\n                            (status + 1) % 3);\n                } else if (window.confirm(`科目「${course.title}」は、別の要件「${currentRequirement!.title}」に割り当てられています。要件「${newRequirement.title}」に移動しますか？`)) {\n                    onClick(status);\n                }\n            }}>\n            <div className=\"d-flex justify-content-between align-items-center\">\n                <div>\n                    <div>{course.title}</div>\n                    <code>{course.code}</code>\n                </div>\n                <div className=\"text-right flex-shrink-0\">\n                    {\n                        status !== RegistrationStatus.Unregistered && currentRequirement !== newRequirement ?\n                            (<Badge variant=\"warning\">!</Badge>) : (<></>)\n                    }\n                    <Badge variant={status === RegistrationStatus.Acquired ? 'success' : status === RegistrationStatus.Registered ? 'primary' : 'secondary'}>\n                        {status === RegistrationStatus.Acquired ? '修得済み' : status === RegistrationStatus.Registered ? '履修する' : '履修しない'}\n                    </Badge>\n                    <div><span className=\"text-muted\">単位数</span> <strong>{course.creditsCount}</strong></div>\n                </div>\n            </div>\n        </ListGroup.Item>\n    );\n\nconst CourseList = ({ requirement, courses, showsOnlyRegistered, courseToStatus, courseToRequirement, onCourseClick }: {\n    requirement: RequirementWithCourses,\n    courses: readonly Course[],\n    showsOnlyRegistered: boolean,\n    courseToStatus: Map<Course, RegistrationStatus>,\n    courseToRequirement: Map<Course, Requirements>,\n    onCourseClick: (course: Course, nextStatus: RegistrationStatus) => void,\n}) => (\n        <ListGroup>\n            {\n                courses.map((course: Course) => (\n                    <CourseListItem key={course.code} course={course}\n                        currentRequirement={courseToRequirement.get(course)}\n                        newRequirement={requirement}\n                        status={courseToStatus.get(course) || RegistrationStatus.Unregistered}\n                        onClick={nextStatus => onCourseClick(course, nextStatus)}\n                        disabled={\n                            (!courseToStatus.has(course) || courseToStatus.get(course) === RegistrationStatus.Unregistered) &&\n                            [...courseToStatus.entries()]\n                                .filter(([_, status]) => status !== RegistrationStatus.Unregistered)\n                                .map(([course, _]) => course.title)\n                                .includes(course.title)\n                        }\n                        showsOnlyRegistered={showsOnlyRegistered} />\n                ))\n            }\n        </ListGroup>\n    );\n\nexport default CourseList;","import React, { useState } from 'react';\nimport { Accordion, Badge, Button, Dropdown, ListGroup } from \"react-bootstrap\";\nimport Course from \"./Course\";\nimport CourseList from \"./CourseList\";\nimport RegistrationStatus from \"./RegistrationStatus\";\nimport Requirements, { RequirementWithChildren, RequirementWithCourses, SelectionRequirement } from \"./Requirements\";\n\nconst CreditsCountLabelDelimiter = () => (<span className=\"text-muted\"> / </span>)\n\nconst CreditsCountLabels = ({ requirement, courseToStatus, courseToRequirement, selectionToRequirement }: {\n    requirement: Requirements,\n    courseToStatus: Map<Course, RegistrationStatus>,\n    courseToRequirement: Map<Course, Requirements>,\n    selectionToRequirement: Map<SelectionRequirement, Requirements>,\n}) => {\n    const acquiredCreditsCount = requirement.getRegisteredCreditsCount({ status: RegistrationStatus.Acquired, courseToRequirement, courseToStatus, selectionToRequirement, includesExcess: false });\n    const exceededAcquiredCreditsCount = requirement.getRegisteredCreditsCount({ status: RegistrationStatus.Acquired, courseToRequirement, courseToStatus, selectionToRequirement, includesExcess: true });\n    const registeredCreditsCount = requirement.getRegisteredCreditsCount({ status: RegistrationStatus.Registered, courseToRequirement, courseToStatus, selectionToRequirement, includesExcess: false });\n    const exceededRegisteredCreditsCount = requirement.getRegisteredCreditsCount({ status: RegistrationStatus.Registered, courseToRequirement, courseToStatus, selectionToRequirement, includesExcess: true });\n    const requiredCreditsCount = requirement.getRequiredCreditsCount(selectionToRequirement);\n    return (\n        <div>\n            <span>\n                <span className=\"text-muted\">習得</span> <strong className=\"text-success\">\n                    {acquiredCreditsCount}\n                </strong>{exceededAcquiredCreditsCount > acquiredCreditsCount ? `(+${exceededAcquiredCreditsCount - acquiredCreditsCount})` : ''}\n            </span>\n            <CreditsCountLabelDelimiter />\n            <span>\n                <span className=\"text-muted\">履修</span> <strong className=\"text-primary\">\n                    {registeredCreditsCount}\n                </strong>{exceededRegisteredCreditsCount > registeredCreditsCount ? `(+${exceededRegisteredCreditsCount - registeredCreditsCount})` : ''}\n            </span>\n            <CreditsCountLabelDelimiter />\n            <span>\n                <span className=\"text-muted\">必要</span> <strong className=\"text-secondary\">\n                    {requiredCreditsCount}\n                </strong>\n            </span>\n        </div>\n    )\n};\n\nconst RequirementSummaryView = ({ requirement, courseToStatus, courseToRequirement, selectionToRequirement }: {\n    requirement: Requirements,\n    courseToStatus: Map<Course, RegistrationStatus>,\n    courseToRequirement: Map<Course, Requirements>,\n    selectionToRequirement: Map<SelectionRequirement, Requirements>,\n}) => {\n    const status = requirement.getStatus({ courseToStatus, courseToRequirement, selectionToRequirement });\n    return (\n        <>\n            <h5 className=\"d-flex justify-content-between align-items-center\">\n                <div>{requirement.title}</div>\n                <Badge className=\"flex-shrink-0\" variant={status === RegistrationStatus.Acquired ? 'success' : status === RegistrationStatus.Registered ? 'primary' : 'secondary'}>\n                    {status === RegistrationStatus.Acquired ? '修得OK' : status === RegistrationStatus.Registered ? '履修OK' : '不足'}\n                </Badge>\n            </h5>\n            <div>\n                {requirement.description === undefined ? (<></>) : (<div className=\"text-muted\">{requirement.description}</div>)}\n                <CreditsCountLabels requirement={requirement} courseToStatus={courseToStatus} courseToRequirement={courseToRequirement} selectionToRequirement={selectionToRequirement} />\n            </div>\n        </>\n    );\n}\n\nconst RequirementWithChildrenView = ({ requirement, showsOnlyRegistered, courseToStatus, courseToRequirement, selectionToRequirement, onCourseClick, onSelectionChange }: {\n    requirement: RequirementWithChildren,\n    showsOnlyRegistered: boolean,\n    courseToStatus: Map<Course, RegistrationStatus>,\n    courseToRequirement: Map<Course, Requirements>,\n    selectionToRequirement: Map<SelectionRequirement, Requirements>,\n    onCourseClick: (course: Course, nextStatus: RegistrationStatus, requirement: Requirements) => void,\n    onSelectionChange: (selection: SelectionRequirement, chosen: Requirements) => void,\n}) => (\n        <>\n            <RequirementSummaryView requirement={requirement} courseToStatus={courseToStatus} courseToRequirement={courseToRequirement} selectionToRequirement={selectionToRequirement} />\n            <ListGroup className=\"mt-2\">\n                {\n                    requirement.children.map(child => (\n                        <ListGroup.Item key={child.title}>\n                            <RequirementView requirement={child} showsOnlyRegistered={showsOnlyRegistered}\n                                courseToStatus={courseToStatus} courseToRequirement={courseToRequirement} selectionToRequirement={selectionToRequirement}\n                                onCourseClick={onCourseClick} onSelectionChange={onSelectionChange} />\n                        </ListGroup.Item>\n                    ))\n                }\n            </ListGroup>\n        </>\n    );\n\nconst RequirementWithCoursesView = ({ requirement, showsOnlyRegistered, courseToStatus, courseToRequirement, onCourseClick, selectionToRequirement }: {\n    requirement: RequirementWithCourses,\n    showsOnlyRegistered: boolean,\n    courseToStatus: Map<Course, RegistrationStatus>,\n    courseToRequirement: Map<Course, Requirements>,\n    selectionToRequirement: Map<SelectionRequirement, Requirements>,\n    onCourseClick: (course: Course, nextStatus: RegistrationStatus, requirement: Requirements) => void,\n    onSelectionChange: (selection: SelectionRequirement, chosen: Requirements) => void,\n}) => {\n    const [isOpen, setIsOpen] = useState(false);\n    const courses = requirement.courses.filter(course =>\n        !showsOnlyRegistered || (courseToStatus.get(course) !== RegistrationStatus.Unregistered &&\n            requirement === courseToRequirement.get(course)));\n\n    return (\n        <>\n            <Accordion activeKey={isOpen ? '0' : ''}>\n                <div className={`bg-white ${isOpen ? 'sticky-top' : ''}`}>\n                    <RequirementSummaryView requirement={requirement} courseToStatus={courseToStatus} courseToRequirement={courseToRequirement} selectionToRequirement={selectionToRequirement} />\n                    {\n                        courses.length === 0 ? (\n                            <Button block size=\"sm\" className=\"mt-2\" variant=\"outline-secondary\" disabled>\n                                {showsOnlyRegistered ? '履修する' : ''}科目はありません\n                            </Button>\n                        ) : (\n                                <Button block size=\"sm\" className=\"mt-2\"\n                                    onClick={() => setIsOpen(!isOpen)}\n                                    variant={isOpen ? 'primary' : 'outline-secondary'} >\n                                    {showsOnlyRegistered ? '履修する' : ''}科目を{isOpen ? '非' : ''}表示\n                                </Button>\n                            )\n                    }\n                </div>\n                <Accordion.Collapse eventKey=\"0\">\n                    {\n                        courses.length === 0 ? (<></>) : (\n                            <div className=\"mt-2\">\n                                <CourseList requirement={requirement} courses={courses} showsOnlyRegistered={showsOnlyRegistered}\n                                    courseToStatus={courseToStatus} courseToRequirement={courseToRequirement}\n                                    onCourseClick={(course, nextStatus) => onCourseClick(course, nextStatus, requirement)} />\n                            </div>\n                        )\n                    }\n                </Accordion.Collapse>\n            </Accordion>\n        </>\n    );\n}\n\nconst SelectionRequirementView = ({ requirement, showsOnlyRegistered, courseToStatus, courseToRequirement, onCourseClick, selectionToRequirement, onSelectionChange }: {\n    requirement: SelectionRequirement,\n    showsOnlyRegistered: boolean,\n    courseToStatus: Map<Course, RegistrationStatus>,\n    courseToRequirement: Map<Course, Requirements>,\n    selectionToRequirement: Map<SelectionRequirement, Requirements>,\n    onCourseClick: (course: Course, nextStatus: RegistrationStatus, requirement: Requirements) => void,\n    onSelectionChange: (selection: SelectionRequirement, chosen: Requirements) => void,\n}) => (\n        <>\n            <Dropdown>\n                <Dropdown.Toggle id=\"\" block size=\"sm\" variant=\"secondary\">{requirement.title} を変更</Dropdown.Toggle>\n\n                <Dropdown.Menu style={{ zIndex: 1100 }}>\n                    {\n                        requirement.choices.map(choice => (\n                            <Dropdown.Item key={choice.title}\n                                active={choice === (selectionToRequirement.get(requirement) || requirement.choices[0])}\n                                onClick={() => onSelectionChange(requirement, choice)}>\n                                {choice.title}\n                            </Dropdown.Item>\n                        ))\n                    }\n                </Dropdown.Menu>\n            </Dropdown>\n            <div className=\"mt-2\">\n                <RequirementView requirement={selectionToRequirement.get(requirement) || requirement.choices[0]}\n                    showsOnlyRegistered={showsOnlyRegistered}\n                    courseToStatus={courseToStatus} courseToRequirement={courseToRequirement}\n                    onCourseClick={onCourseClick} onSelectionChange={onSelectionChange}\n                    selectionToRequirement={selectionToRequirement} />\n            </div>\n        </>\n    );\n\nconst RequirementView = ({ requirement, showsOnlyRegistered, courseToStatus, courseToRequirement, onCourseClick, onSelectionChange, selectionToRequirement }: {\n    requirement: Requirements,\n    showsOnlyRegistered: boolean,\n    courseToStatus: Map<Course, RegistrationStatus>,\n    courseToRequirement: Map<Course, Requirements>,\n    selectionToRequirement: Map<SelectionRequirement, Requirements>,\n    onCourseClick: (course: Course, nextStatus: RegistrationStatus, requirement: Requirements) => void,\n    onSelectionChange: (selection: SelectionRequirement, chosen: Requirements) => void,\n}) =>\n    requirement instanceof RequirementWithChildren ? (<RequirementWithChildrenView showsOnlyRegistered={showsOnlyRegistered} onCourseClick={onCourseClick} requirement={requirement} courseToStatus={courseToStatus} courseToRequirement={courseToRequirement} selectionToRequirement={selectionToRequirement} onSelectionChange={onSelectionChange} />) :\n        requirement instanceof RequirementWithCourses ? (<RequirementWithCoursesView showsOnlyRegistered={showsOnlyRegistered} onCourseClick={onCourseClick} requirement={requirement} courseToStatus={courseToStatus} courseToRequirement={courseToRequirement} selectionToRequirement={selectionToRequirement} onSelectionChange={onSelectionChange} />) :\n            (<SelectionRequirementView requirement={requirement} showsOnlyRegistered={showsOnlyRegistered} onCourseClick={onCourseClick} courseToStatus={courseToStatus} courseToRequirement={courseToRequirement} selectionToRequirement={selectionToRequirement} onSelectionChange={onSelectionChange} />);\n\n\nexport default RequirementView;\n","import { $array, $number, $object, $optional, $string, isCompatible } from '@hiroto/json-type-checker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport React, { useState } from 'react';\nimport { Alert, Container, Form, Navbar } from 'react-bootstrap';\nimport './App.css';\nimport requirements0 from './coins17.json';\nimport Course from './Course';\nimport courses0 from './courses1.json';\nimport RegistrationStatus from './RegistrationStatus';\nimport Requirements, { RequirementWithChildren, RequirementWithCourses, SelectionRequirement } from './Requirements';\nimport RequirementView from './RequirementView';\n\nconst courses: unknown = courses0;\n\nif (!isCompatible(courses, $array($object({\n    title: $string,\n    code: $string,\n    creditsCount: $number,\n})))) {\n    throw new Error('科目定義が不正です');\n}\n\nconst codeToCourse = new Map<string, Course>();\nfor (const course of courses) {\n    codeToCourse.set(course.code, course);\n}\n\nconst convertJSONToRichRequirement = (json: unknown): Requirements => {\n    if (isCompatible(json, $object({\n        title: $string,\n        description: $optional($string),\n        creditsCount: $number,\n        courses: $array($string),\n    }))) {\n        return new RequirementWithCourses({\n            title: json.title,\n            description: json.description,\n            creditsCount: json.creditsCount,\n            courses: json.courses.map(courseCode => {\n                const course = codeToCourse.get(courseCode);\n                if (course === undefined) { throw new Error(`要件定義が不正です。科目番号 ${courseCode} は定義されていません。`); }\n                return course;\n            })\n        });\n    } else if (isCompatible(json, $object({\n        title: $string,\n        description: $optional($string),\n        children: $array($object({})),\n        creditsCount: $optional($number),\n    }))) {\n        return new RequirementWithChildren({\n            title: json.title,\n            description: json.description,\n            children: json.children.map(child => convertJSONToRichRequirement(child)),\n            creditsCount: json.creditsCount,\n        });\n    } else if (isCompatible(json, $object({\n        title: $string,\n        description: $optional($string),\n        choices: $array($object({})),\n    }))) {\n        return new SelectionRequirement({\n            title: json.title,\n            description: json.description,\n            choices: json.choices.map(choice => convertJSONToRichRequirement(choice)),\n        })\n    } else {\n        throw new Error('要件定義が不正です。')\n    }\n}\n\nconst requirement = convertJSONToRichRequirement(requirements0);\n\nconsole.log(requirement);\n\nconst App = () => {\n    const [courseToStatus, setCourseToStatus] = useState(new Map<Course, RegistrationStatus>());\n    const [courseToRequirement, setCourseToRequirement] = useState(new Map<Course, Requirements>());\n    const [selectionToRequirement, setSelectionToRequirement] = useState(new Map<SelectionRequirement, Requirements>());\n    const [showsOnlyRegistered, setShowsOnlyRegistered] = useState(false);\n\n    return (\n        <>\n            <Navbar variant=\"dark\" bg=\"dark\">\n                <Navbar.Brand>卒業要件を満たしたい</Navbar.Brand>\n            </Navbar>\n            <Container>\n                <Alert variant=\"danger\" className=\"mt-3\">\n                    このツールの結果を利用する場合、必ず履修要覧や支援室などでその結果が正しいことを確認するようにしてください。\n                    <strong>科目や要件の定義が誤っていたり、実際には認められない履修の組み合わせがある可能性があります。</strong>\n                </Alert>\n                <Form className=\"mt-3\">\n                    <Form.Check custom label=\"履修する科目のみ表示する\" id=\"showsOnlyRegisteredCheck\"\n                        checked={showsOnlyRegistered}\n                        onChange={() => setShowsOnlyRegistered(!showsOnlyRegistered)} />\n                </Form>\n                <div className=\"my-3\">\n                    <RequirementView requirement={requirement} showsOnlyRegistered={showsOnlyRegistered}\n                        courseToStatus={courseToStatus} courseToRequirement={courseToRequirement} selectionToRequirement={selectionToRequirement}\n                        onCourseClick={\n                            (course: Course, nextStatus: RegistrationStatus, requirement: Requirements) => {\n                                setCourseToStatus(new Map([...courseToStatus, [course, nextStatus]]));\n                                setCourseToRequirement(new Map([...courseToRequirement, [course, requirement]]));\n                            }\n                        }\n                        onSelectionChange={\n                            (selection: SelectionRequirement, chosen: Requirements) => setSelectionToRequirement(new Map([...selectionToRequirement, [selection, chosen]]))\n                        } />\n                </div>\n            </Container>\n        </>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}